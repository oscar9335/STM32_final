
final_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f0  080062f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f8  080062f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00012ea0  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f1c  20012f1c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129d1  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a61  00000000  00000000  00032a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  000354e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d94  00000000  00000000  00037558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cfd  00000000  00000000  000592ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d271e  00000000  00000000  0006bfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e707  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049b0  00000000  00000000  0013e758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061cc 	.word	0x080061cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080061cc 	.word	0x080061cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fdfb 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f817 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8a9 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f87d 	bl	8000694 <MX_USART2_UART_Init>
//  xTaskCreate(Sensor_bedroom_out,"Sensor_bedroom_out",128,NULL,3,&xHandle);
//  xTaskCreate(Sensor_livingroom_in,"Sensor_livingroom_in",128,NULL,3,&xHandle);
//  xTaskCreate(Sensor_livingroom_out,"Sensor_livingroom_out",128,NULL,3,&xHandle);
//  xSemaphore = xSemaphoreCreateBinary();

  xTaskCreate(LED_task,"LED_task",128,NULL,1,&xHandle);
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <main+0x30>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <main+0x34>)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0x38>)
 80005aa:	f003 fa83 	bl	8003ab4 <xTaskCreate>

  vTaskStartScheduler();
 80005ae:	f003 fbf3 	bl	8003d98 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <main+0x2e>
 80005b4:	200000dc 	.word	0x200000dc
 80005b8:	080061fc 	.word	0x080061fc
 80005bc:	08000b05 	.word	0x08000b05

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 f994 	bl	80058fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000634:	2332      	movs	r3, #50	; 0x32
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000638:	2304      	movs	r3, #4
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063c:	2307      	movs	r3, #7
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f877 	bl	8001738 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 fc14 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fad8 	bl	8001c28 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 fbfd 	bl	8000e7c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART2_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006cc:	f001 ffac 	bl	8002628 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 fbd1 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000098 	.word	0x20000098
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4ba5      	ldr	r3, [pc, #660]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aa4      	ldr	r2, [pc, #656]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4ba2      	ldr	r3, [pc, #648]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b9e      	ldr	r3, [pc, #632]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a9d      	ldr	r2, [pc, #628]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b9b      	ldr	r3, [pc, #620]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b97      	ldr	r3, [pc, #604]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a96      	ldr	r2, [pc, #600]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b94      	ldr	r3, [pc, #592]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b90      	ldr	r3, [pc, #576]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a8f      	ldr	r2, [pc, #572]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b8d      	ldr	r3, [pc, #564]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b89      	ldr	r3, [pc, #548]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a88      	ldr	r2, [pc, #544]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b86      	ldr	r3, [pc, #536]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b82      	ldr	r3, [pc, #520]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a81      	ldr	r2, [pc, #516]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7f      	ldr	r3, [pc, #508]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	487c      	ldr	r0, [pc, #496]	; (800099c <MX_GPIO_Init+0x2b4>)
 80007ac:	f000 ffaa 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	487a      	ldr	r0, [pc, #488]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80007b6:	f000 ffa5 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ba:	2200      	movs	r2, #0
 80007bc:	f24f 0160 	movw	r1, #61536	; 0xf060
 80007c0:	4878      	ldr	r0, [pc, #480]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80007c2:	f000 ff9f 	bl	8001704 <HAL_GPIO_WritePin>
                          |room_LED_Pin|Livingroom_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	486f      	ldr	r0, [pc, #444]	; (800099c <MX_GPIO_Init+0x2b4>)
 80007de:	f000 fdf5 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4869      	ldr	r0, [pc, #420]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80007fa:	f000 fde7 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4861      	ldr	r0, [pc, #388]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 800081a:	f000 fdd7 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800081e:	2310      	movs	r3, #16
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082e:	2306      	movs	r3, #6
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	485b      	ldr	r0, [pc, #364]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 800083a:	f000 fdc7 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800083e:	23e0      	movs	r3, #224	; 0xe0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800084e:	2305      	movs	r3, #5
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4853      	ldr	r0, [pc, #332]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 800085a:	f000 fdb7 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	484e      	ldr	r0, [pc, #312]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000872:	f000 fdab 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000888:	2305      	movs	r3, #5
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4846      	ldr	r0, [pc, #280]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000894:	f000 fd9a 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           room_LED_Pin Livingroom_LED_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000898:	f24f 0360 	movw	r3, #61536	; 0xf060
 800089c:	61fb      	str	r3, [r7, #28]
                          |room_LED_Pin|Livingroom_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80008b2:	f000 fd8b 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008b6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c8:	2306      	movs	r3, #6
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4833      	ldr	r0, [pc, #204]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80008d4:	f000 fd7a 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 80008ee:	f000 fd6d 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000904:	230a      	movs	r3, #10
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4826      	ldr	r0, [pc, #152]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 8000910:	f000 fd5c 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : livingroom_in_Pin bedroom_out_Pin bedroom_in_Pin livingroom_out_Pin */
  GPIO_InitStruct.Pin = livingroom_in_Pin|bedroom_out_Pin|bedroom_in_Pin|livingroom_out_Pin;
 8000914:	230f      	movs	r3, #15
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	481e      	ldr	r0, [pc, #120]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 800092a:	f000 fd4f 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800092e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000934:	2312      	movs	r3, #18
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000940:	2304      	movs	r3, #4
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_GPIO_Init+0x2c4>)
 800094c:	f000 fd3e 	bl	80013cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2105      	movs	r1, #5
 8000954:	2006      	movs	r0, #6
 8000956:	f000 fd0f 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800095a:	2006      	movs	r0, #6
 800095c:	f000 fd28 	bl	80013b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2105      	movs	r1, #5
 8000964:	2007      	movs	r0, #7
 8000966:	f000 fd07 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fd20 	bl	80013b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2105      	movs	r1, #5
 8000974:	2008      	movs	r0, #8
 8000976:	f000 fcff 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800097a:	2008      	movs	r0, #8
 800097c:	f000 fd18 	bl	80013b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2105      	movs	r1, #5
 8000984:	2009      	movs	r0, #9
 8000986:	f000 fcf7 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800098a:	2009      	movs	r0, #9
 800098c:	f000 fd10 	bl	80013b0 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3730      	adds	r7, #48	; 0x30
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40021000 	.word	0x40021000
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020c00 	.word	0x40020c00
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400

080009b0 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 4 */


void EXTI0_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	livingroom_in = 1;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <EXTI0_IRQHandler+0x1c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(livingroom_in_Pin);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 f840 	bl	8000a40 <HAL_GPIO_EXTI_IRQHandler>

  counter_living = 5;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <EXTI0_IRQHandler+0x20>)
 80009c2:	2205      	movs	r2, #5
 80009c4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000ec 	.word	0x200000ec
 80009d0:	20000004 	.word	0x20000004

080009d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	bedroom_out = 1;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <EXTI1_IRQHandler+0x1c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */

  HAL_GPIO_EXTI_IRQHandler(bedroom_out_Pin);
 80009de:	2002      	movs	r0, #2
 80009e0:	f000 f82e 	bl	8000a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  counter_bed = 5;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <EXTI1_IRQHandler+0x20>)
 80009e6:	2205      	movs	r2, #5
 80009e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000e0 	.word	0x200000e0
 80009f4:	20000000 	.word	0x20000000

080009f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	bedroom_in = 1;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI2_IRQHandler+0x1c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(bedroom_in_Pin);
 8000a02:	2004      	movs	r0, #4
 8000a04:	f000 f81c 	bl	8000a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  counter_bed = 5;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <EXTI2_IRQHandler+0x20>)
 8000a0a:	2205      	movs	r2, #5
 8000a0c:	601a      	str	r2, [r3, #0]
  // Clear the EXTI line 0 pending interrupt flag
//  __HAL_GPIO_EXTI_CLEAR_IT(bedroom_in_Pin);

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000e4 	.word	0x200000e4
 8000a18:	20000000 	.word	0x20000000

08000a1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	livingroom_out = 1;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI3_IRQHandler+0x1c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(livingroom_out_Pin);
 8000a26:	2008      	movs	r0, #8
 8000a28:	f000 f80a 	bl	8000a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  counter_living = 5;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <EXTI3_IRQHandler+0x20>)
 8000a2e:	2205      	movs	r2, #5
 8000a30:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000e8 	.word	0x200000e8
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_GPIO_EXTI_IRQHandler>:



void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <HAL_GPIO_EXTI_IRQHandler+0x24>

//
//		sprintf(MonitorTset,"Back to IRQhandler : %d\n\r",__HAL_GPIO_EXTI_GET_IT(GPIO_Pin));
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	6153      	str	r3, [r2, #20]

//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET );

		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f806 	bl	8000a70 <HAL_GPIO_EXTI_Callback>

//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET );


	}
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40013c00 	.word	0x40013c00

08000a70 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]

	BaseType_t *taskwoken;
	taskwoken=pdFALSE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

	char MonitorTset[30];
	memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	221e      	movs	r2, #30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 ff38 	bl	80058fc <memset>




	// state change bedroom
	bedroom_state[0] = bedroom_state[2];
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a92:	6013      	str	r3, [r2, #0]
	bedroom_state[1] = bedroom_state[3];
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a9a:	6053      	str	r3, [r2, #4]
	bedroom_state[2] = bedroom_out;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000aa2:	6093      	str	r3, [r2, #8]
	bedroom_state[3] = bedroom_in;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000aaa:	60d3      	str	r3, [r2, #12]

	bedroom_in = 0;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
	bedroom_out = 0;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]


	// state change living room
	livingroom_state[0] = livingroom_state[2];
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000abe:	6013      	str	r3, [r2, #0]
	livingroom_state[1] = livingroom_state[3];
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ac6:	6053      	str	r3, [r2, #4]
	livingroom_state[2] = livingroom_out;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ace:	6093      	str	r3, [r2, #8]
	livingroom_state[3] = livingroom_in;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x90>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ad6:	60d3      	str	r3, [r2, #12]

	livingroom_in = 0;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
	livingroom_out = 0;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]



//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);

}
 8000ae4:	bf00      	nop
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000f8 	.word	0x200000f8
 8000af0:	200000e0 	.word	0x200000e0
 8000af4:	200000e4 	.word	0x200000e4
 8000af8:	20000108 	.word	0x20000108
 8000afc:	200000e8 	.word	0x200000e8
 8000b00:	200000ec 	.word	0x200000ec

08000b04 <LED_task>:





void LED_task ( void ){
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b091      	sub	sp, #68	; 0x44
 8000b08:	af02      	add	r7, sp, #8
	xSemaphore = xSemaphoreCreateBinary();
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f002 fa68 	bl	8002fe4 <xQueueGenericCreate>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a98      	ldr	r2, [pc, #608]	; (8000d78 <LED_task+0x274>)
 8000b18:	6013      	str	r3, [r2, #0]

	for(;;){
		counter_bed--;
 8000b1a:	4b98      	ldr	r3, [pc, #608]	; (8000d7c <LED_task+0x278>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	4a96      	ldr	r2, [pc, #600]	; (8000d7c <LED_task+0x278>)
 8000b22:	6013      	str	r3, [r2, #0]
		counter_living--;
 8000b24:	4b96      	ldr	r3, [pc, #600]	; (8000d80 <LED_task+0x27c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4a95      	ldr	r2, [pc, #596]	; (8000d80 <LED_task+0x27c>)
 8000b2c:	6013      	str	r3, [r2, #0]
		char MonitorTset[30];
		memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000b2e:	463b      	mov	r3, r7
 8000b30:	221e      	movs	r2, #30
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fee1 	bl	80058fc <memset>
//
//		sprintf(MonitorTset,"In LED task\n\r");
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		if( xSemaphore != NULL ){
 8000b3a:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <LED_task+0x274>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 816e 	beq.w	8000e20 <LED_task+0x31c>
			if( xSemaphoreTake( xSemaphore, ( TickType_t ) 10  ) == pdTRUE ){
 8000b44:	4b8c      	ldr	r3, [pc, #560]	; (8000d78 <LED_task+0x274>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	210a      	movs	r1, #10
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fd20 	bl	8003590 <xQueueSemaphoreTake>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	f040 8164 	bne.w	8000e20 <LED_task+0x31c>





				sprintf(MonitorTset,"bedroom_state %d %d %d %d\n\r",bedroom_state[0],bedroom_state[1],bedroom_state[2],bedroom_state[3]);
 8000b58:	4b8a      	ldr	r3, [pc, #552]	; (8000d84 <LED_task+0x280>)
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	4b89      	ldr	r3, [pc, #548]	; (8000d84 <LED_task+0x280>)
 8000b5e:	685c      	ldr	r4, [r3, #4]
 8000b60:	4b88      	ldr	r3, [pc, #544]	; (8000d84 <LED_task+0x280>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	4a87      	ldr	r2, [pc, #540]	; (8000d84 <LED_task+0x280>)
 8000b66:	68d2      	ldr	r2, [r2, #12]
 8000b68:	4638      	mov	r0, r7
 8000b6a:	9201      	str	r2, [sp, #4]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4623      	mov	r3, r4
 8000b70:	460a      	mov	r2, r1
 8000b72:	4985      	ldr	r1, [pc, #532]	; (8000d88 <LED_task+0x284>)
 8000b74:	f004 feca 	bl	800590c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb28 	bl	80001d0 <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4639      	mov	r1, r7
 8000b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8a:	4880      	ldr	r0, [pc, #512]	; (8000d8c <LED_task+0x288>)
 8000b8c:	f001 fd99 	bl	80026c2 <HAL_UART_Transmit>

				sprintf(MonitorTset,"livingroom_state %d %d %d %d\n\r",livingroom_state[0],livingroom_state[1],livingroom_state[2],livingroom_state[3]);
 8000b90:	4b7f      	ldr	r3, [pc, #508]	; (8000d90 <LED_task+0x28c>)
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <LED_task+0x28c>)
 8000b96:	685c      	ldr	r4, [r3, #4]
 8000b98:	4b7d      	ldr	r3, [pc, #500]	; (8000d90 <LED_task+0x28c>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	4a7c      	ldr	r2, [pc, #496]	; (8000d90 <LED_task+0x28c>)
 8000b9e:	68d2      	ldr	r2, [r2, #12]
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	460a      	mov	r2, r1
 8000baa:	497a      	ldr	r1, [pc, #488]	; (8000d94 <LED_task+0x290>)
 8000bac:	f004 feae 	bl	800590c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb0c 	bl	80001d0 <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc2:	4872      	ldr	r0, [pc, #456]	; (8000d8c <LED_task+0x288>)
 8000bc4:	f001 fd7d 	bl	80026c2 <HAL_UART_Transmit>


				// for the bedroom
				if(bedroom_state[0]== 1 && bedroom_state[1]== 0 && bedroom_state[2]== 0 && bedroom_state[3]== 1){
 8000bc8:	4b6e      	ldr	r3, [pc, #440]	; (8000d84 <LED_task+0x280>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d124      	bne.n	8000c1a <LED_task+0x116>
 8000bd0:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <LED_task+0x280>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d120      	bne.n	8000c1a <LED_task+0x116>
 8000bd8:	4b6a      	ldr	r3, [pc, #424]	; (8000d84 <LED_task+0x280>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11c      	bne.n	8000c1a <LED_task+0x116>
 8000be0:	4b68      	ldr	r3, [pc, #416]	; (8000d84 <LED_task+0x280>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d118      	bne.n	8000c1a <LED_task+0x116>
					number_of_people_bedroom++;
 8000be8:	4b6b      	ldr	r3, [pc, #428]	; (8000d98 <LED_task+0x294>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a6a      	ldr	r2, [pc, #424]	; (8000d98 <LED_task+0x294>)
 8000bf0:	6013      	str	r3, [r2, #0]
					number_of_people_livingroom--;
 8000bf2:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <LED_task+0x298>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	4a68      	ldr	r2, [pc, #416]	; (8000d9c <LED_task+0x298>)
 8000bfa:	6013      	str	r3, [r2, #0]

					for(int i = 0 ; i < 4 ; ++i){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8000c00:	e007      	b.n	8000c12 <LED_task+0x10e>
						bedroom_state[i] = 0;
 8000c02:	4a60      	ldr	r2, [pc, #384]	; (8000d84 <LED_task+0x280>)
 8000c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c06:	2100      	movs	r1, #0
 8000c08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0 ; i < 4 ; ++i){
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0e:	3301      	adds	r3, #1
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	ddf4      	ble.n	8000c02 <LED_task+0xfe>
 8000c18:	e027      	b.n	8000c6a <LED_task+0x166>
					}

				}
				else if(bedroom_state[0]== 0 && bedroom_state[1]== 1 && bedroom_state[2]== 1 && bedroom_state[3]== 0){
 8000c1a:	4b5a      	ldr	r3, [pc, #360]	; (8000d84 <LED_task+0x280>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d123      	bne.n	8000c6a <LED_task+0x166>
 8000c22:	4b58      	ldr	r3, [pc, #352]	; (8000d84 <LED_task+0x280>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d11f      	bne.n	8000c6a <LED_task+0x166>
 8000c2a:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <LED_task+0x280>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d11b      	bne.n	8000c6a <LED_task+0x166>
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <LED_task+0x280>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d117      	bne.n	8000c6a <LED_task+0x166>
					number_of_people_bedroom--;
 8000c3a:	4b57      	ldr	r3, [pc, #348]	; (8000d98 <LED_task+0x294>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	4a55      	ldr	r2, [pc, #340]	; (8000d98 <LED_task+0x294>)
 8000c42:	6013      	str	r3, [r2, #0]
					number_of_people_livingroom++;
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <LED_task+0x298>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a54      	ldr	r2, [pc, #336]	; (8000d9c <LED_task+0x298>)
 8000c4c:	6013      	str	r3, [r2, #0]
					for(int i = 0 ; i < 4 ; ++i){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
 8000c52:	e007      	b.n	8000c64 <LED_task+0x160>
						bedroom_state[i] = 0;
 8000c54:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <LED_task+0x280>)
 8000c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0 ; i < 4 ; ++i){
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	3301      	adds	r3, #1
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	ddf4      	ble.n	8000c54 <LED_task+0x150>
					}
				}


				// for the living room
				if(livingroom_state[0]== 1 && livingroom_state[1]== 0 && livingroom_state[2]== 0 && livingroom_state[3]== 1){
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <LED_task+0x28c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d11f      	bne.n	8000cb2 <LED_task+0x1ae>
 8000c72:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <LED_task+0x28c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d11b      	bne.n	8000cb2 <LED_task+0x1ae>
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <LED_task+0x28c>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d117      	bne.n	8000cb2 <LED_task+0x1ae>
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <LED_task+0x28c>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d113      	bne.n	8000cb2 <LED_task+0x1ae>
					number_of_people_livingroom++;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <LED_task+0x298>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <LED_task+0x298>)
 8000c92:	6013      	str	r3, [r2, #0]

					for(int i = 0 ; i < 4 ; ++i){
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c98:	e007      	b.n	8000caa <LED_task+0x1a6>
						livingroom_state[i] = 0;
 8000c9a:	4a3d      	ldr	r2, [pc, #244]	; (8000d90 <LED_task+0x28c>)
 8000c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0 ; i < 4 ; ++i){
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	ddf4      	ble.n	8000c9a <LED_task+0x196>
 8000cb0:	e022      	b.n	8000cf8 <LED_task+0x1f4>
					}

				}
				else if(livingroom_state[0]== 0 && livingroom_state[1]== 1 && livingroom_state[2]== 1 && livingroom_state[3]== 0){
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <LED_task+0x28c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d11e      	bne.n	8000cf8 <LED_task+0x1f4>
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <LED_task+0x28c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d11a      	bne.n	8000cf8 <LED_task+0x1f4>
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <LED_task+0x28c>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d116      	bne.n	8000cf8 <LED_task+0x1f4>
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <LED_task+0x28c>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d112      	bne.n	8000cf8 <LED_task+0x1f4>
					number_of_people_livingroom--;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <LED_task+0x298>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <LED_task+0x298>)
 8000cda:	6013      	str	r3, [r2, #0]

					for(int i = 0 ; i < 4 ; ++i){
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce0:	e007      	b.n	8000cf2 <LED_task+0x1ee>
						livingroom_state[i] = 0;
 8000ce2:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <LED_task+0x28c>)
 8000ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0 ; i < 4 ; ++i){
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	3301      	adds	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	ddf4      	ble.n	8000ce2 <LED_task+0x1de>
					}
				}


				sprintf(MonitorTset,"number_of_people_bedroom %d\n\r",number_of_people_bedroom);
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <LED_task+0x294>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4928      	ldr	r1, [pc, #160]	; (8000da0 <LED_task+0x29c>)
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fe03 	bl	800590c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000d06:	463b      	mov	r3, r7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa61 	bl	80001d0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4639      	mov	r1, r7
 8000d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <LED_task+0x288>)
 8000d1a:	f001 fcd2 	bl	80026c2 <HAL_UART_Transmit>

				sprintf(MonitorTset,"number_of_people_livingroom %d\n\r",number_of_people_livingroom);
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <LED_task+0x298>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	463b      	mov	r3, r7
 8000d24:	491f      	ldr	r1, [pc, #124]	; (8000da4 <LED_task+0x2a0>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 fdf0 	bl	800590c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa4e 	bl	80001d0 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4639      	mov	r1, r7
 8000d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3e:	4813      	ldr	r0, [pc, #76]	; (8000d8c <LED_task+0x288>)
 8000d40:	f001 fcbf 	bl	80026c2 <HAL_UART_Transmit>

				// for LED controll
				if(number_of_people_bedroom > 0){
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <LED_task+0x294>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dd05      	ble.n	8000d58 <LED_task+0x254>
					// turn on the bedroom LED
					HAL_GPIO_WritePin(GPIOD, room_LED_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <LED_task+0x2a4>)
 8000d52:	f000 fcd7 	bl	8001704 <HAL_GPIO_WritePin>
 8000d56:	e004      	b.n	8000d62 <LED_task+0x25e>
				}
				else{
					// turn off the bedroom LED
					HAL_GPIO_WritePin(GPIOD, room_LED_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	4812      	ldr	r0, [pc, #72]	; (8000da8 <LED_task+0x2a4>)
 8000d5e:	f000 fcd1 	bl	8001704 <HAL_GPIO_WritePin>
				}


				if(number_of_people_livingroom > 0){
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <LED_task+0x298>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	dd20      	ble.n	8000dac <LED_task+0x2a8>
					// turn on the bedroom LED
					HAL_GPIO_WritePin(GPIOD, Livingroom_LED_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <LED_task+0x2a4>)
 8000d70:	f000 fcc8 	bl	8001704 <HAL_GPIO_WritePin>
 8000d74:	e01f      	b.n	8000db6 <LED_task+0x2b2>
 8000d76:	bf00      	nop
 8000d78:	20000118 	.word	0x20000118
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004
 8000d84:	200000f8 	.word	0x200000f8
 8000d88:	08006208 	.word	0x08006208
 8000d8c:	20000098 	.word	0x20000098
 8000d90:	20000108 	.word	0x20000108
 8000d94:	08006224 	.word	0x08006224
 8000d98:	200000f4 	.word	0x200000f4
 8000d9c:	200000f0 	.word	0x200000f0
 8000da0:	08006244 	.word	0x08006244
 8000da4:	08006264 	.word	0x08006264
 8000da8:	40020c00 	.word	0x40020c00
				}
				else{
					// turn off the bedroom LED
					HAL_GPIO_WritePin(GPIOD, Livingroom_LED_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2140      	movs	r1, #64	; 0x40
 8000db0:	4821      	ldr	r0, [pc, #132]	; (8000e38 <LED_task+0x334>)
 8000db2:	f000 fca7 	bl	8001704 <HAL_GPIO_WritePin>
				}

				if(counter_bed == 0){
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <LED_task+0x338>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10d      	bne.n	8000dda <LED_task+0x2d6>
					for(int i = 0 ; i < 4 ; ++i){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	e007      	b.n	8000dd4 <LED_task+0x2d0>
						bedroom_state[i] = 0;
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <LED_task+0x33c>)
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0 ; i < 4 ; ++i){
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	ddf4      	ble.n	8000dc4 <LED_task+0x2c0>
					}
				}
				if(counter_living == 0){
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <LED_task+0x340>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10d      	bne.n	8000dfe <LED_task+0x2fa>
					for(int i = 0 ; i < 4 ; ++i){
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	e007      	b.n	8000df8 <LED_task+0x2f4>
						livingroom_state[i] = 0;
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <LED_task+0x344>)
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	2100      	movs	r1, #0
 8000dee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0 ; i < 4 ; ++i){
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	3301      	adds	r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	ddf4      	ble.n	8000de8 <LED_task+0x2e4>
					}
				}



				sprintf(MonitorTset,"\n\r");
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4912      	ldr	r1, [pc, #72]	; (8000e4c <LED_task+0x348>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fd82 	bl	800590c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff f9e0 	bl	80001d0 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4639      	mov	r1, r7
 8000e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LED_task+0x34c>)
 8000e1c:	f001 fc51 	bl	80026c2 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);




		vTaskDelay(500);
 8000e20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e24:	f002 ff84 	bl	8003d30 <vTaskDelay>
		xSemaphoreGive( xSemaphore );
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <LED_task+0x350>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	f002 f937 	bl	80030a4 <xQueueGenericSend>
	for(;;){
 8000e36:	e670      	b.n	8000b1a <LED_task+0x16>
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	200000f8 	.word	0x200000f8
 8000e44:	20000004 	.word	0x20000004
 8000e48:	20000108 	.word	0x20000108
 8000e4c:	08006288 	.word	0x08006288
 8000e50:	20000098 	.word	0x20000098
 8000e54:	20000118 	.word	0x20000118

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f000 f9ad 	bl	80011c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001400 	.word	0x40001400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f32:	230c      	movs	r3, #12
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x8c>)
 8000f4e:	f000 fa3d 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <HAL_InitTick+0xe4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <HAL_InitTick+0xe4>)
 8000f82:	f043 0320 	orr.w	r3, r3, #32
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <HAL_InitTick+0xe4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f94:	f107 0210 	add.w	r2, r7, #16
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f862 	bl	8002068 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fae:	f001 f833 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8000fb2:	6378      	str	r0, [r7, #52]	; 0x34
 8000fb4:	e004      	b.n	8000fc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fb6:	f001 f82f 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <HAL_InitTick+0xe8>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_InitTick+0xec>)
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <HAL_InitTick+0xf0>)
 8000fd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_InitTick+0xec>)
 8000fd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fda:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <HAL_InitTick+0xec>)
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_InitTick+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_InitTick+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_InitTick+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <HAL_InitTick+0xec>)
 8000ff6:	f001 f869 	bl	80020cc <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11b      	bne.n	8001040 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001008:	4812      	ldr	r0, [pc, #72]	; (8001054 <HAL_InitTick+0xec>)
 800100a:	f001 f8b9 	bl	8002180 <HAL_TIM_Base_Start_IT>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001018:	2b00      	cmp	r3, #0
 800101a:	d111      	bne.n	8001040 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800101c:	2037      	movs	r0, #55	; 0x37
 800101e:	f000 f9c7 	bl	80013b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d808      	bhi.n	800103a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	2037      	movs	r0, #55	; 0x37
 800102e:	f000 f9a3 	bl	8001378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_InitTick+0xf4>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e002      	b.n	8001040 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001044:	4618      	mov	r0, r3
 8001046:	3738      	adds	r7, #56	; 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	431bde83 	.word	0x431bde83
 8001054:	2000011c 	.word	0x2000011c
 8001058:	40001400 	.word	0x40001400
 800105c:	2000000c 	.word	0x2000000c

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM7_IRQHandler+0x10>)
 8001092:	f001 f8e5 	bl	8002260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000011c 	.word	0x2000011c

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f004 fbdc 	bl	800588c <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20020000 	.word	0x20020000
 8001100:	00000400 	.word	0x00000400
 8001104:	20000164 	.word	0x20000164
 8001108:	20012f20 	.word	0x20012f20

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115a:	f7ff ffd7 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f004 fb9b 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fa0f 	bl	8000584 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001174:	08006300 	.word	0x08006300
  ldr r2, =_sbss
 8001178:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800117c:	20012f1c 	.word	0x20012f1c

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f8d8 	bl	8001362 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f7ff fed8 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fe66 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000010 	.word	0x20000010
 80011ec:	20000168 	.word	0x20000168

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000168 	.word	0x20000168

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff4c 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138a:	f7ff ff61 	bl	8001250 <__NVIC_GetPriorityGrouping>
 800138e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff ffb1 	bl	80012fc <NVIC_EncodePriority>
 800139a:	4602      	mov	r2, r0
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff80 	bl	80012a8 <__NVIC_SetPriority>
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff54 	bl	800126c <__NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e16b      	b.n	80016c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 815a 	bne.w	80016ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80b4 	beq.w	80016ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a5f      	ldr	r2, [pc, #380]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a5b      	ldr	r2, [pc, #364]	; (80016dc <HAL_GPIO_Init+0x310>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_GPIO_Init+0x314>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d02b      	beq.n	80015f2 <HAL_GPIO_Init+0x226>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <HAL_GPIO_Init+0x318>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d025      	beq.n	80015ee <HAL_GPIO_Init+0x222>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_GPIO_Init+0x31c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01f      	beq.n	80015ea <HAL_GPIO_Init+0x21e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_GPIO_Init+0x320>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_GPIO_Init+0x324>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x216>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x328>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x212>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_GPIO_Init+0x32c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_GPIO_Init+0x330>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x20a>
 80015d2:	2307      	movs	r3, #7
 80015d4:	e00e      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e00c      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015da:	2306      	movs	r3, #6
 80015dc:	e00a      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015de:	2305      	movs	r3, #5
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	; (80016dc <HAL_GPIO_Init+0x310>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a32      	ldr	r2, [pc, #200]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_GPIO_Init+0x334>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_GPIO_Init+0x334>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_GPIO_Init+0x334>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f ae90 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40021400 	.word	0x40021400
 80016f8:	40021800 	.word	0x40021800
 80016fc:	40021c00 	.word	0x40021c00
 8001700:	40013c00 	.word	0x40013c00

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	619a      	str	r2, [r3, #24]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e267      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d075      	beq.n	8001842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001756:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b04      	cmp	r3, #4
 8001760:	d00c      	beq.n	800177c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4b85      	ldr	r3, [pc, #532]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800176a:	2b08      	cmp	r3, #8
 800176c:	d112      	bne.n	8001794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b82      	ldr	r3, [pc, #520]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800177a:	d10b      	bne.n	8001794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4b7e      	ldr	r3, [pc, #504]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d05b      	beq.n	8001840 <HAL_RCC_OscConfig+0x108>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d157      	bne.n	8001840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e242      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x74>
 800179e:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a75      	ldr	r2, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xb0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x98>
 80017b6:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6f      	ldr	r2, [pc, #444]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6c      	ldr	r2, [pc, #432]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xb0>
 80017d0:	4b69      	ldr	r3, [pc, #420]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a68      	ldr	r2, [pc, #416]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b66      	ldr	r3, [pc, #408]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fcfe 	bl	80011f0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fcfa 	bl	80011f0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e207      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xc0>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fcea 	bl	80011f0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fce6 	bl	80011f0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1f3      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0xe8>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d063      	beq.n	8001916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184e:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b44      	ldr	r3, [pc, #272]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x152>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1c7      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e03a      	b.n	8001916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_OscConfig+0x244>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff fc9f 	bl	80011f0 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fc9b 	bl	80011f0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1a8      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4925      	ldr	r1, [pc, #148]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x244>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fc7e 	bl	80011f0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fc7a 	bl	80011f0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e187      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d036      	beq.n	8001990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d016      	beq.n	8001958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_OscConfig+0x248>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff fc5e 	bl	80011f0 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff fc5a 	bl	80011f0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e167      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x240>)
 800194c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x200>
 8001956:	e01b      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_OscConfig+0x248>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fc47 	bl	80011f0 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	e00e      	b.n	8001984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fc43 	bl	80011f0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d907      	bls.n	8001984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e150      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
 8001978:	40023800 	.word	0x40023800
 800197c:	42470000 	.word	0x42470000
 8001980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ea      	bne.n	8001966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8097 	beq.w	8001acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	4b81      	ldr	r3, [pc, #516]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b7d      	ldr	r3, [pc, #500]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a7c      	ldr	r2, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b77      	ldr	r3, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x474>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b74      	ldr	r3, [pc, #464]	; (8001bac <HAL_RCC_OscConfig+0x474>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a73      	ldr	r2, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x474>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fc03 	bl	80011f0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff fbff 	bl	80011f0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e10c      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x474>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2ea>
 8001a14:	4b64      	ldr	r3, [pc, #400]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a63      	ldr	r2, [pc, #396]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x324>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x30c>
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x324>
 8001a44:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a57      	ldr	r2, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	4b55      	ldr	r3, [pc, #340]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a54      	ldr	r2, [pc, #336]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff fbc4 	bl	80011f0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fbc0 	bl	80011f0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0cb      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ee      	beq.n	8001a6c <HAL_RCC_OscConfig+0x334>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fbae 	bl	80011f0 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff fbaa 	bl	80011f0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0b5      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a38      	ldr	r2, [pc, #224]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a1 	beq.w	8001c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d05c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d141      	bne.n	8001b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_OscConfig+0x478>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fb7e 	bl	80011f0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff fb7a 	bl	80011f0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e087      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	491b      	ldr	r1, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x478>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb53 	bl	80011f0 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fb4f 	bl	80011f0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e05c      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x416>
 8001b6c:	e054      	b.n	8001c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x478>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fb3c 	bl	80011f0 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff fb38 	bl	80011f0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e045      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_OscConfig+0x470>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x444>
 8001b9a:	e03d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e038      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x4ec>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d028      	beq.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d121      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d11a      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d111      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0cc      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d90c      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0b8      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	494d      	ldr	r1, [pc, #308]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d044      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d119      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e07f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e067      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4934      	ldr	r1, [pc, #208]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d18:	f7ff fa6a 	bl	80011f0 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff fa66 	bl	80011f0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e04f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d20c      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e032      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4916      	ldr	r1, [pc, #88]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dae:	f000 f821 	bl	8001df4 <HAL_RCC_GetSysClockFreq>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	490a      	ldr	r1, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	5ccb      	ldrb	r3, [r1, r3]
 8001dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8ca 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00
 8001de4:	40023800 	.word	0x40023800
 8001de8:	080062a4 	.word	0x080062a4
 8001dec:	20000008 	.word	0x20000008
 8001df0:	2000000c 	.word	0x2000000c

08001df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df8:	b094      	sub	sp, #80	; 0x50
 8001dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001e00:	2300      	movs	r3, #0
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e04:	2300      	movs	r3, #0
 8001e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e0c:	4b79      	ldr	r3, [pc, #484]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d00d      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x40>
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	f200 80e1 	bhi.w	8001fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x34>
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e26:	e0db      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e2c:	e0db      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8001e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e32:	e0d8      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d063      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	099b      	lsrs	r3, r3, #6
 8001e50:	2200      	movs	r2, #0
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
 8001e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e66:	4622      	mov	r2, r4
 8001e68:	462b      	mov	r3, r5
 8001e6a:	f04f 0000 	mov.w	r0, #0
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e78:	0150      	lsls	r0, r2, #5
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4621      	mov	r1, r4
 8001e80:	1a51      	subs	r1, r2, r1
 8001e82:	6139      	str	r1, [r7, #16]
 8001e84:	4629      	mov	r1, r5
 8001e86:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e98:	4659      	mov	r1, fp
 8001e9a:	018b      	lsls	r3, r1, #6
 8001e9c:	4651      	mov	r1, sl
 8001e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	018a      	lsls	r2, r1, #6
 8001ea6:	4651      	mov	r1, sl
 8001ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8001eac:	4659      	mov	r1, fp
 8001eae:	eb63 0901 	sbc.w	r9, r3, r1
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ec6:	4690      	mov	r8, r2
 8001ec8:	4699      	mov	r9, r3
 8001eca:	4623      	mov	r3, r4
 8001ecc:	eb18 0303 	adds.w	r3, r8, r3
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	eb49 0303 	adc.w	r3, r9, r3
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	024b      	lsls	r3, r1, #9
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	024a      	lsls	r2, r1, #9
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efa:	2200      	movs	r2, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f04:	f7fe f9bc 	bl	8000280 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f10:	e058      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	099b      	lsrs	r3, r3, #6
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f2c:	4642      	mov	r2, r8
 8001f2e:	464b      	mov	r3, r9
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	0159      	lsls	r1, r3, #5
 8001f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3e:	0150      	lsls	r0, r2, #5
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4641      	mov	r1, r8
 8001f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f64:	ebb2 040a 	subs.w	r4, r2, sl
 8001f68:	eb63 050b 	sbc.w	r5, r3, fp
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	00eb      	lsls	r3, r5, #3
 8001f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f7a:	00e2      	lsls	r2, r4, #3
 8001f7c:	4614      	mov	r4, r2
 8001f7e:	461d      	mov	r5, r3
 8001f80:	4643      	mov	r3, r8
 8001f82:	18e3      	adds	r3, r4, r3
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	464b      	mov	r3, r9
 8001f88:	eb45 0303 	adc.w	r3, r5, r3
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	028b      	lsls	r3, r1, #10
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	028a      	lsls	r2, r1, #10
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	61fa      	str	r2, [r7, #28]
 8001fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb8:	f7fe f962 	bl	8000280 <__aeabi_uldivmod>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fde:	e002      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3750      	adds	r7, #80	; 0x50
 8001fec:	46bd      	mov	sp, r7
 8001fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	00f42400 	.word	0x00f42400
 8001ffc:	007a1200 	.word	0x007a1200

08002000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_RCC_GetHCLKFreq+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800201c:	f7ff fff0 	bl	8002000 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0a9b      	lsrs	r3, r3, #10
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <HAL_RCC_GetPCLK1Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	080062b4 	.word	0x080062b4

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002044:	f7ff ffdc 	bl	8002000 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0b5b      	lsrs	r3, r3, #13
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4903      	ldr	r1, [pc, #12]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	080062b4 	.word	0x080062b4

08002068 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	220f      	movs	r2, #15
 8002076:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_GetClockConfig+0x5c>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_RCC_GetClockConfig+0x5c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCC_GetClockConfig+0x60>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0207 	and.w	r2, r3, #7
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e041      	b.n	8002162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f839 	bl	800216a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3304      	adds	r3, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 f9d8 	bl	80024c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e04e      	b.n	8002236 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <HAL_TIM_Base_Start_IT+0xc4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d022      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d01d      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_TIM_Base_Start_IT+0xc8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d018      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_TIM_Base_Start_IT+0xcc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_TIM_Base_Start_IT+0xd0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_TIM_Base_Start_IT+0xd4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_TIM_Base_Start_IT+0xd8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x80>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_TIM_Base_Start_IT+0xdc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d010      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	e007      	b.n	8002234 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40010400 	.word	0x40010400
 8002258:	40014000 	.word	0x40014000
 800225c:	40001800 	.word	0x40001800

08002260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0202 	mvn.w	r2, #2
 800228c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f8ee 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8e0 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f8f1 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0204 	mvn.w	r2, #4
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8c4 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8b6 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8c7 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b08      	cmp	r3, #8
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b08      	cmp	r3, #8
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0208 	mvn.w	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f89a 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f88c 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f89d 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b10      	cmp	r3, #16
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b10      	cmp	r3, #16
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0210 	mvn.w	r2, #16
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2208      	movs	r2, #8
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f870 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f862 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f873 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0201 	mvn.w	r2, #1
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fd3a 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f902 	bl	8002614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f838 	bl	80024ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b20      	cmp	r3, #32
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0220 	mvn.w	r2, #32
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8cc 	bl	8002600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a40      	ldr	r2, [pc, #256]	; (80025d4 <TIM_Base_SetConfig+0x114>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d00f      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <TIM_Base_SetConfig+0x118>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00b      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <TIM_Base_SetConfig+0x11c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <TIM_Base_SetConfig+0x120>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <TIM_Base_SetConfig+0x124>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <TIM_Base_SetConfig+0x114>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02b      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d027      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <TIM_Base_SetConfig+0x118>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d023      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2b      	ldr	r2, [pc, #172]	; (80025dc <TIM_Base_SetConfig+0x11c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01f      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <TIM_Base_SetConfig+0x120>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01b      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <TIM_Base_SetConfig+0x124>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d017      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <TIM_Base_SetConfig+0x128>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <TIM_Base_SetConfig+0x12c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00f      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <TIM_Base_SetConfig+0x130>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00b      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <TIM_Base_SetConfig+0x134>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <TIM_Base_SetConfig+0x138>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d003      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a23      	ldr	r2, [pc, #140]	; (80025fc <TIM_Base_SetConfig+0x13c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d108      	bne.n	8002584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <TIM_Base_SetConfig+0x114>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0xf8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <TIM_Base_SetConfig+0x124>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	615a      	str	r2, [r3, #20]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40000c00 	.word	0x40000c00
 80025e4:	40010400 	.word	0x40010400
 80025e8:	40014000 	.word	0x40014000
 80025ec:	40014400 	.word	0x40014400
 80025f0:	40014800 	.word	0x40014800
 80025f4:	40001800 	.word	0x40001800
 80025f8:	40001c00 	.word	0x40001c00
 80025fc:	40002000 	.word	0x40002000

08002600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e03f      	b.n	80026ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fc42 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f929 	bl	80028c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b08a      	sub	sp, #40	; 0x28
 80026c6:	af02      	add	r7, sp, #8
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d17c      	bne.n	80027dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_UART_Transmit+0x2c>
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e075      	b.n	80027de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_UART_Transmit+0x3e>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e06e      	b.n	80027de <HAL_UART_Transmit+0x11c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2221      	movs	r2, #33	; 0x21
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002716:	f7fe fd6b 	bl	80011f0 <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002730:	d108      	bne.n	8002744 <HAL_UART_Transmit+0x82>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e003      	b.n	800274c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002754:	e02a      	b.n	80027ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f840 	bl	80027e6 <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e036      	b.n	80027de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3302      	adds	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e007      	b.n	800279e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3301      	adds	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1cf      	bne.n	8002756 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	2140      	movs	r1, #64	; 0x40
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f810 	bl	80027e6 <UART_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e006      	b.n	80027de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b090      	sub	sp, #64	; 0x40
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f6:	e050      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d04c      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0x30>
 8002806:	f7fe fcf3 	bl	80011f0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002812:	429a      	cmp	r2, r3
 8002814:	d241      	bcs.n	800289a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002836:	637a      	str	r2, [r7, #52]	; 0x34
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800283c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3314      	adds	r3, #20
 8002850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	613b      	str	r3, [r7, #16]
   return(result);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	63bb      	str	r3, [r7, #56]	; 0x38
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3314      	adds	r3, #20
 8002868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800286a:	623a      	str	r2, [r7, #32]
 800286c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	69f9      	ldr	r1, [r7, #28]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	61bb      	str	r3, [r7, #24]
   return(result);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e00f      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d09f      	beq.n	80027f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3740      	adds	r7, #64	; 0x40
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b0c0      	sub	sp, #256	; 0x100
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	68d9      	ldr	r1, [r3, #12]
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	ea40 0301 	orr.w	r3, r0, r1
 80028ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	431a      	orrs	r2, r3
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800291c:	f021 010c 	bic.w	r1, r1, #12
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800292a:	430b      	orrs	r3, r1
 800292c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	6999      	ldr	r1, [r3, #24]
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	ea40 0301 	orr.w	r3, r0, r1
 800294a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <UART_SetConfig+0x2cc>)
 8002954:	429a      	cmp	r2, r3
 8002956:	d005      	beq.n	8002964 <UART_SetConfig+0xa0>
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b8d      	ldr	r3, [pc, #564]	; (8002b94 <UART_SetConfig+0x2d0>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d104      	bne.n	800296e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002964:	f7ff fb6c 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 8002968:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800296c:	e003      	b.n	8002976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296e:	f7ff fb53 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8002972:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002980:	f040 810c 	bne.w	8002b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800298e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002996:	4622      	mov	r2, r4
 8002998:	462b      	mov	r3, r5
 800299a:	1891      	adds	r1, r2, r2
 800299c:	65b9      	str	r1, [r7, #88]	; 0x58
 800299e:	415b      	adcs	r3, r3
 80029a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029a6:	4621      	mov	r1, r4
 80029a8:	eb12 0801 	adds.w	r8, r2, r1
 80029ac:	4629      	mov	r1, r5
 80029ae:	eb43 0901 	adc.w	r9, r3, r1
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c6:	4690      	mov	r8, r2
 80029c8:	4699      	mov	r9, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	eb18 0303 	adds.w	r3, r8, r3
 80029d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029d4:	462b      	mov	r3, r5
 80029d6:	eb49 0303 	adc.w	r3, r9, r3
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029f2:	460b      	mov	r3, r1
 80029f4:	18db      	adds	r3, r3, r3
 80029f6:	653b      	str	r3, [r7, #80]	; 0x50
 80029f8:	4613      	mov	r3, r2
 80029fa:	eb42 0303 	adc.w	r3, r2, r3
 80029fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a08:	f7fd fc3a 	bl	8000280 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <UART_SetConfig+0x2d4>)
 8002a12:	fba3 2302 	umull	r2, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	011c      	lsls	r4, r3, #4
 8002a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	1891      	adds	r1, r2, r2
 8002a32:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a34:	415b      	adcs	r3, r3
 8002a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a42:	4649      	mov	r1, r9
 8002a44:	eb43 0b01 	adc.w	fp, r3, r1
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a5c:	4692      	mov	sl, r2
 8002a5e:	469b      	mov	fp, r3
 8002a60:	4643      	mov	r3, r8
 8002a62:	eb1a 0303 	adds.w	r3, sl, r3
 8002a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	18db      	adds	r3, r3, r3
 8002a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a8e:	4613      	mov	r3, r2
 8002a90:	eb42 0303 	adc.w	r3, r2, r3
 8002a94:	647b      	str	r3, [r7, #68]	; 0x44
 8002a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a9e:	f7fd fbef 	bl	8000280 <__aeabi_uldivmod>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <UART_SetConfig+0x2d4>)
 8002aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2264      	movs	r2, #100	; 0x64
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	1acb      	subs	r3, r1, r3
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <UART_SetConfig+0x2d4>)
 8002ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002acc:	441c      	add	r4, r3
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	1891      	adds	r1, r2, r2
 8002ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ae8:	415b      	adcs	r3, r3
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002af0:	4641      	mov	r1, r8
 8002af2:	1851      	adds	r1, r2, r1
 8002af4:	6339      	str	r1, [r7, #48]	; 0x30
 8002af6:	4649      	mov	r1, r9
 8002af8:	414b      	adcs	r3, r1
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b08:	4659      	mov	r1, fp
 8002b0a:	00cb      	lsls	r3, r1, #3
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b12:	4651      	mov	r1, sl
 8002b14:	00ca      	lsls	r2, r1, #3
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b24:	464b      	mov	r3, r9
 8002b26:	460a      	mov	r2, r1
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b44:	460b      	mov	r3, r1
 8002b46:	18db      	adds	r3, r3, r3
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	eb42 0303 	adc.w	r3, r2, r3
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b5a:	f7fd fb91 	bl	8000280 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <UART_SetConfig+0x2d4>)
 8002b64:	fba3 1302 	umull	r1, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	2164      	movs	r1, #100	; 0x64
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	3332      	adds	r3, #50	; 0x32
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <UART_SetConfig+0x2d4>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 0207 	and.w	r2, r3, #7
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4422      	add	r2, r4
 8002b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b8c:	e105      	b.n	8002d9a <UART_SetConfig+0x4d6>
 8002b8e:	bf00      	nop
 8002b90:	40011000 	.word	0x40011000
 8002b94:	40011400 	.word	0x40011400
 8002b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bae:	4642      	mov	r2, r8
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	1891      	adds	r1, r2, r2
 8002bb4:	6239      	str	r1, [r7, #32]
 8002bb6:	415b      	adcs	r3, r3
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	1854      	adds	r4, r2, r1
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	eb43 0501 	adc.w	r5, r3, r1
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	00eb      	lsls	r3, r5, #3
 8002bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd6:	00e2      	lsls	r2, r4, #3
 8002bd8:	4614      	mov	r4, r2
 8002bda:	461d      	mov	r5, r3
 8002bdc:	4643      	mov	r3, r8
 8002bde:	18e3      	adds	r3, r4, r3
 8002be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002be4:	464b      	mov	r3, r9
 8002be6:	eb45 0303 	adc.w	r3, r5, r3
 8002bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	008b      	lsls	r3, r1, #2
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c14:	4621      	mov	r1, r4
 8002c16:	008a      	lsls	r2, r1, #2
 8002c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c1c:	f7fd fb30 	bl	8000280 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <UART_SetConfig+0x4e4>)
 8002c26:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	011c      	lsls	r4, r3, #4
 8002c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c40:	4642      	mov	r2, r8
 8002c42:	464b      	mov	r3, r9
 8002c44:	1891      	adds	r1, r2, r2
 8002c46:	61b9      	str	r1, [r7, #24]
 8002c48:	415b      	adcs	r3, r3
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c50:	4641      	mov	r1, r8
 8002c52:	1851      	adds	r1, r2, r1
 8002c54:	6139      	str	r1, [r7, #16]
 8002c56:	4649      	mov	r1, r9
 8002c58:	414b      	adcs	r3, r1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c68:	4659      	mov	r1, fp
 8002c6a:	00cb      	lsls	r3, r1, #3
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c72:	4651      	mov	r1, sl
 8002c74:	00ca      	lsls	r2, r1, #3
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c84:	464b      	mov	r3, r9
 8002c86:	460a      	mov	r2, r1
 8002c88:	eb42 0303 	adc.w	r3, r2, r3
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ca8:	4649      	mov	r1, r9
 8002caa:	008b      	lsls	r3, r1, #2
 8002cac:	4641      	mov	r1, r8
 8002cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	008a      	lsls	r2, r1, #2
 8002cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cba:	f7fd fae1 	bl	8000280 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <UART_SetConfig+0x4e4>)
 8002cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	2164      	movs	r1, #100	; 0x64
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	3332      	adds	r3, #50	; 0x32
 8002cd6:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <UART_SetConfig+0x4e4>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce2:	441c      	add	r4, r3
 8002ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce8:	2200      	movs	r2, #0
 8002cea:	673b      	str	r3, [r7, #112]	; 0x70
 8002cec:	677a      	str	r2, [r7, #116]	; 0x74
 8002cee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cf2:	4642      	mov	r2, r8
 8002cf4:	464b      	mov	r3, r9
 8002cf6:	1891      	adds	r1, r2, r2
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	415b      	adcs	r3, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d02:	4641      	mov	r1, r8
 8002d04:	1851      	adds	r1, r2, r1
 8002d06:	6039      	str	r1, [r7, #0]
 8002d08:	4649      	mov	r1, r9
 8002d0a:	414b      	adcs	r3, r1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	00cb      	lsls	r3, r1, #3
 8002d1e:	4651      	mov	r1, sl
 8002d20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d24:	4651      	mov	r1, sl
 8002d26:	00ca      	lsls	r2, r1, #3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4642      	mov	r2, r8
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d34:	464b      	mov	r3, r9
 8002d36:	460a      	mov	r2, r1
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	663b      	str	r3, [r7, #96]	; 0x60
 8002d48:	667a      	str	r2, [r7, #100]	; 0x64
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d56:	4649      	mov	r1, r9
 8002d58:	008b      	lsls	r3, r1, #2
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d60:	4641      	mov	r1, r8
 8002d62:	008a      	lsls	r2, r1, #2
 8002d64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d68:	f7fd fa8a 	bl	8000280 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <UART_SetConfig+0x4e4>)
 8002d72:	fba3 1302 	umull	r1, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2164      	movs	r1, #100	; 0x64
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	3332      	adds	r3, #50	; 0x32
 8002d84:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <UART_SetConfig+0x4e4>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	f003 020f 	and.w	r2, r3, #15
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4422      	add	r2, r4
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da6:	bf00      	nop
 8002da8:	51eb851f 	.word	0x51eb851f

08002dac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 0208 	add.w	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f103 0208 	add.w	r2, r3, #8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 0208 	add.w	r2, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d103      	bne.n	8002e6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e00c      	b.n	8002e88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3308      	adds	r3, #8
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e002      	b.n	8002e7c <vListInsert+0x2e>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d2f6      	bcs.n	8002e76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6852      	ldr	r2, [r2, #4]
 8002ee0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d103      	bne.n	8002ef4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f3e:	f002 f9a9 	bl	8005294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	441a      	add	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	441a      	add	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d114      	bne.n	8002fbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01a      	beq.n	8002fd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3310      	adds	r3, #16
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 f965 	bl	8004270 <xTaskRemoveFromEventList>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <xQueueGenericReset+0xcc>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	e009      	b.n	8002fd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fef2 	bl	8002dac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3324      	adds	r3, #36	; 0x24
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feed 	bl	8002dac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fd2:	f002 f98f 	bl	80052f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fd6:	2301      	movs	r3, #1
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	613b      	str	r3, [r7, #16]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e004      	b.n	8003024 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	3350      	adds	r3, #80	; 0x50
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fa55 	bl	80054d8 <pvPortMalloc>
 800302e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3350      	adds	r3, #80	; 0x50
 800303e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003040:	79fa      	ldrb	r2, [r7, #7]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f805 	bl	800305c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003052:	69bb      	ldr	r3, [r7, #24]
	}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e002      	b.n	800307e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800308a:	2101      	movs	r1, #1
 800308c:	69b8      	ldr	r0, [r7, #24]
 800308e:	f7ff ff41 	bl	8002f14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08e      	sub	sp, #56	; 0x38
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030b2:	2300      	movs	r3, #0
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xQueueGenericSend+0x32>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <xQueueGenericSend+0x40>
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <xQueueGenericSend+0x44>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <xQueueGenericSend+0x46>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <xQueueGenericSend+0x60>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d103      	bne.n	8003112 <xQueueGenericSend+0x6e>
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <xQueueGenericSend+0x72>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <xQueueGenericSend+0x74>
 8003116:	2300      	movs	r3, #0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xQueueGenericSend+0x8e>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	623b      	str	r3, [r7, #32]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003132:	f001 fa39 	bl	80045a8 <xTaskGetSchedulerState>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <xQueueGenericSend+0x9e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <xQueueGenericSend+0xa2>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <xQueueGenericSend+0xa4>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <xQueueGenericSend+0xbe>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	61fb      	str	r3, [r7, #28]
}
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003162:	f002 f897 	bl	8005294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <xQueueGenericSend+0xd4>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d129      	bne.n	80031cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800317e:	f000 fb2b 	bl	80037d8 <prvCopyDataToQueue>
 8003182:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	3324      	adds	r3, #36	; 0x24
 8003190:	4618      	mov	r0, r3
 8003192:	f001 f86d 	bl	8004270 <xTaskRemoveFromEventList>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <xQueueGenericSend+0x1f8>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	e00a      	b.n	80031c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80031b4:	4b39      	ldr	r3, [pc, #228]	; (800329c <xQueueGenericSend+0x1f8>)
 80031b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031c4:	f002 f896 	bl	80052f4 <vPortExitCritical>
				return pdPASS;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e063      	b.n	8003294 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031d2:	f002 f88f 	bl	80052f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e05c      	b.n	8003294 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 f8a5 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ee:	f002 f881 	bl	80052f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031f2:	f000 fe1f 	bl	8003e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031f6:	f002 f84d 	bl	8005294 <vPortEnterCritical>
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003200:	b25b      	sxtb	r3, r3
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d103      	bne.n	8003210 <xQueueGenericSend+0x16c>
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003216:	b25b      	sxtb	r3, r3
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d103      	bne.n	8003226 <xQueueGenericSend+0x182>
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003226:	f002 f865 	bl	80052f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800322a:	1d3a      	adds	r2, r7, #4
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f001 f894 	bl	8004360 <xTaskCheckForTimeOut>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d124      	bne.n	8003288 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800323e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003240:	f000 fbc2 	bl	80039c8 <prvIsQueueFull>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d018      	beq.n	800327c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	3310      	adds	r3, #16
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 ffbc 	bl	80041d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325a:	f000 fb4d 	bl	80038f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800325e:	f000 fdf7 	bl	8003e50 <xTaskResumeAll>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	f47f af7c 	bne.w	8003162 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <xQueueGenericSend+0x1f8>)
 800326c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	e772      	b.n	8003162 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800327c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327e:	f000 fb3b 	bl	80038f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003282:	f000 fde5 	bl	8003e50 <xTaskResumeAll>
 8003286:	e76c      	b.n	8003162 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800328a:	f000 fb35 	bl	80038f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800328e:	f000 fddf 	bl	8003e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003292:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003294:	4618      	mov	r0, r3
 8003296:	3738      	adds	r7, #56	; 0x38
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08e      	sub	sp, #56	; 0x38
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <xQueueGenericSendFromISR+0x3c>
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <xQueueGenericSendFromISR+0x40>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <xQueueGenericSendFromISR+0x42>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	623b      	str	r3, [r7, #32]
}
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d103      	bne.n	800330a <xQueueGenericSendFromISR+0x6a>
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <xQueueGenericSendFromISR+0x6e>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <xQueueGenericSendFromISR+0x70>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61fb      	str	r3, [r7, #28]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800332a:	f002 f895 	bl	8005458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800332e:	f3ef 8211 	mrs	r2, BASEPRI
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	61ba      	str	r2, [r7, #24]
 8003344:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003346:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <xQueueGenericSendFromISR+0xbc>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d12c      	bne.n	80033b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336c:	f000 fa34 	bl	80037d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003370:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d112      	bne.n	80033a0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	3324      	adds	r3, #36	; 0x24
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff72 	bl	8004270 <xTaskRemoveFromEventList>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00e      	beq.n	80033b0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e007      	b.n	80033b0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033a4:	3301      	adds	r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	b25a      	sxtb	r2, r3
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033b0:	2301      	movs	r3, #1
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80033b4:	e001      	b.n	80033ba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3738      	adds	r7, #56	; 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <xQueueReceive+0x30>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	623b      	str	r3, [r7, #32]
}
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <xQueueReceive+0x3e>
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <xQueueReceive+0x42>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueReceive+0x44>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <xQueueReceive+0x5e>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	61fb      	str	r3, [r7, #28]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800342e:	f001 f8bb 	bl	80045a8 <xTaskGetSchedulerState>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <xQueueReceive+0x6e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <xQueueReceive+0x72>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <xQueueReceive+0x74>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <xQueueReceive+0x8e>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	61bb      	str	r3, [r7, #24]
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800345e:	f001 ff19 	bl	8005294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01f      	beq.n	80034ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003472:	f000 fa1b 	bl	80038ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00f      	beq.n	80034a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	3310      	adds	r3, #16
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fef0 	bl	8004270 <xTaskRemoveFromEventList>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <xQueueReceive+0x1bc>)
 8003498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034a6:	f001 ff25 	bl	80052f4 <vPortExitCritical>
				return pdPASS;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e069      	b.n	8003582 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034b4:	f001 ff1e 	bl	80052f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e062      	b.n	8003582 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 ff34 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034d0:	f001 ff10 	bl	80052f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034d4:	f000 fcae 	bl	8003e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034d8:	f001 fedc 	bl	8005294 <vPortEnterCritical>
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d103      	bne.n	80034f2 <xQueueReceive+0x122>
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f8:	b25b      	sxtb	r3, r3
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d103      	bne.n	8003508 <xQueueReceive+0x138>
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003508:	f001 fef4 	bl	80052f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800350c:	1d3a      	adds	r2, r7, #4
 800350e:	f107 0310 	add.w	r3, r7, #16
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f000 ff23 	bl	8004360 <xTaskCheckForTimeOut>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d123      	bne.n	8003568 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003522:	f000 fa3b 	bl	800399c <prvIsQueueEmpty>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fe4b 	bl	80041d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800353a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800353c:	f000 f9dc 	bl	80038f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003540:	f000 fc86 	bl	8003e50 <xTaskResumeAll>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d189      	bne.n	800345e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <xQueueReceive+0x1bc>)
 800354c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	e780      	b.n	800345e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800355c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800355e:	f000 f9cb 	bl	80038f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003562:	f000 fc75 	bl	8003e50 <xTaskResumeAll>
 8003566:	e77a      	b.n	800345e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356a:	f000 f9c5 	bl	80038f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800356e:	f000 fc6f 	bl	8003e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003574:	f000 fa12 	bl	800399c <prvIsQueueEmpty>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f43f af6f 	beq.w	800345e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000ed04 	.word	0xe000ed04

08003590 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	623b      	str	r3, [r7, #32]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61fb      	str	r3, [r7, #28]
}
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035e0:	f000 ffe2 	bl	80045a8 <xTaskGetSchedulerState>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <xQueueSemaphoreTake+0x60>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <xQueueSemaphoreTake+0x64>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <xQueueSemaphoreTake+0x66>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61bb      	str	r3, [r7, #24]
}
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003610:	f001 fe40 	bl	8005294 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d024      	beq.n	800366a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003630:	f001 f978 	bl	8004924 <pvTaskIncrementMutexHeldCount>
 8003634:	4602      	mov	r2, r0
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00f      	beq.n	8003662 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	3310      	adds	r3, #16
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fe12 	bl	8004270 <xTaskRemoveFromEventList>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <xQueueSemaphoreTake+0x214>)
 8003654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003662:	f001 fe47 	bl	80052f4 <vPortExitCritical>
				return pdPASS;
 8003666:	2301      	movs	r3, #1
 8003668:	e097      	b.n	800379a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d111      	bne.n	8003694 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	617b      	str	r3, [r7, #20]
}
 8003688:	bf00      	nop
 800368a:	e7fe      	b.n	800368a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800368c:	f001 fe32 	bl	80052f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003690:	2300      	movs	r3, #0
 8003692:	e082      	b.n	800379a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fe48 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036a4:	2301      	movs	r3, #1
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a8:	f001 fe24 	bl	80052f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036ac:	f000 fbc2 	bl	8003e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036b0:	f001 fdf0 	bl	8005294 <vPortEnterCritical>
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d103      	bne.n	80036ca <xQueueSemaphoreTake+0x13a>
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d103      	bne.n	80036e0 <xQueueSemaphoreTake+0x150>
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e0:	f001 fe08 	bl	80052f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036e4:	463a      	mov	r2, r7
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fe37 	bl	8004360 <xTaskCheckForTimeOut>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d132      	bne.n	800375e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036fa:	f000 f94f 	bl	800399c <prvIsQueueEmpty>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d026      	beq.n	8003752 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800370c:	f001 fdc2 	bl	8005294 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 ff65 	bl	80045e4 <xTaskPriorityInherit>
 800371a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800371c:	f001 fdea 	bl	80052f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd51 	bl	80041d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800372e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003730:	f000 f8e2 	bl	80038f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003734:	f000 fb8c 	bl	8003e50 <xTaskResumeAll>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f47f af68 	bne.w	8003610 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <xQueueSemaphoreTake+0x214>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	e75e      	b.n	8003610 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003754:	f000 f8d0 	bl	80038f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003758:	f000 fb7a 	bl	8003e50 <xTaskResumeAll>
 800375c:	e758      	b.n	8003610 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800375e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003760:	f000 f8ca 	bl	80038f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003764:	f000 fb74 	bl	8003e50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800376a:	f000 f917 	bl	800399c <prvIsQueueEmpty>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f43f af4d 	beq.w	8003610 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800377c:	f001 fd8a 	bl	8005294 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003782:	f000 f811 	bl	80037a8 <prvGetDisinheritPriorityAfterTimeout>
 8003786:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378e:	4618      	mov	r0, r3
 8003790:	f001 f82e 	bl	80047f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003794:	f001 fdae 	bl	80052f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800379a:	4618      	mov	r0, r3
 800379c:	3738      	adds	r7, #56	; 0x38
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1c3 0305 	rsb	r3, r3, #5
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e001      	b.n	80037ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037ca:	68fb      	ldr	r3, [r7, #12]
	}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10d      	bne.n	8003812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d14d      	bne.n	800389a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 ff6e 	bl	80046e4 <xTaskPriorityDisinherit>
 8003808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	e043      	b.n	800389a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d119      	bne.n	800384c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6858      	ldr	r0, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	461a      	mov	r2, r3
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	f002 f85c 	bl	80058e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	441a      	add	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d32b      	bcc.n	800389a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	e026      	b.n	800389a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68d8      	ldr	r0, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	461a      	mov	r2, r3
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	f002 f842 	bl	80058e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	425b      	negs	r3, r3
 8003866:	441a      	add	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d207      	bcs.n	8003888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	425b      	negs	r3, r3
 8003882:	441a      	add	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d105      	bne.n	800389a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	3b01      	subs	r3, #1
 8003898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038a2:	697b      	ldr	r3, [r7, #20]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d303      	bcc.n	80038e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68d9      	ldr	r1, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	461a      	mov	r2, r3
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f001 fff8 	bl	80058e0 <memcpy>
	}
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003900:	f001 fcc8 	bl	8005294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800390c:	e011      	b.n	8003932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d012      	beq.n	800393c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3324      	adds	r3, #36	; 0x24
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fca8 	bl	8004270 <xTaskRemoveFromEventList>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003926:	f000 fd7d 	bl	8004424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	3b01      	subs	r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	dce9      	bgt.n	800390e <prvUnlockQueue+0x16>
 800393a:	e000      	b.n	800393e <prvUnlockQueue+0x46>
					break;
 800393c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003946:	f001 fcd5 	bl	80052f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800394a:	f001 fca3 	bl	8005294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003956:	e011      	b.n	800397c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d012      	beq.n	8003986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3310      	adds	r3, #16
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fc83 	bl	8004270 <xTaskRemoveFromEventList>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003970:	f000 fd58 	bl	8004424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	3b01      	subs	r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800397c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003980:	2b00      	cmp	r3, #0
 8003982:	dce9      	bgt.n	8003958 <prvUnlockQueue+0x60>
 8003984:	e000      	b.n	8003988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003990:	f001 fcb0 	bl	80052f4 <vPortExitCritical>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039a4:	f001 fc76 	bl	8005294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039b0:	2301      	movs	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	e001      	b.n	80039ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ba:	f001 fc9b 	bl	80052f4 <vPortExitCritical>

	return xReturn;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039d0:	f001 fc60 	bl	8005294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d102      	bne.n	80039e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e001      	b.n	80039ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ea:	f001 fc83 	bl	80052f4 <vPortExitCritical>

	return xReturn;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e014      	b.n	8003a32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a08:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <vQueueAddToRegistry+0x50>)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a14:	490c      	ldr	r1, [pc, #48]	; (8003a48 <vQueueAddToRegistry+0x50>)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <vQueueAddToRegistry+0x50>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a2a:	e006      	b.n	8003a3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b07      	cmp	r3, #7
 8003a36:	d9e7      	bls.n	8003a08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000016c 	.word	0x2000016c

08003a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a5c:	f001 fc1a 	bl	8005294 <vPortEnterCritical>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d103      	bne.n	8003a76 <vQueueWaitForMessageRestricted+0x2a>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d103      	bne.n	8003a8c <vQueueWaitForMessageRestricted+0x40>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8c:	f001 fc32 	bl	80052f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fbb9 	bl	8004218 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff26 	bl	80038f8 <prvUnlockQueue>
	}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af04      	add	r7, sp, #16
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fd05 	bl	80054d8 <pvPortMalloc>
 8003ace:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ad6:	2058      	movs	r0, #88	; 0x58
 8003ad8:	f001 fcfe 	bl	80054d8 <pvPortMalloc>
 8003adc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aea:	e005      	b.n	8003af8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f001 fdb7 	bl	8005660 <vPortFree>
 8003af2:	e001      	b.n	8003af8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9303      	str	r3, [sp, #12]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f80e 	bl	8003b36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b1a:	69f8      	ldr	r0, [r7, #28]
 8003b1c:	f000 f89a 	bl	8003c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b20:	2301      	movs	r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e002      	b.n	8003b2c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b088      	sub	sp, #32
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	21a5      	movs	r1, #165	; 0xa5
 8003b50:	f001 fed4 	bl	80058fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f023 0307 	bic.w	r3, r3, #7
 8003b6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	617b      	str	r3, [r7, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01f      	beq.n	8003bd4 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e012      	b.n	8003bc0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	7819      	ldrb	r1, [r3, #0]
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3334      	adds	r3, #52	; 0x34
 8003baa:	460a      	mov	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d006      	beq.n	8003bc8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b09      	cmp	r3, #9
 8003bc4:	d9e9      	bls.n	8003b9a <prvInitialiseNewTask+0x64>
 8003bc6:	e000      	b.n	8003bca <prvInitialiseNewTask+0x94>
			{
				break;
 8003bc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bd2:	e003      	b.n	8003bdc <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d901      	bls.n	8003be6 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003be2:	2304      	movs	r3, #4
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f8f5 	bl	8002dec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	3318      	adds	r3, #24
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff f8f0 	bl	8002dec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	f1c3 0205 	rsb	r2, r3, #5
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2200      	movs	r2, #0
 8003c26:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	69b8      	ldr	r0, [r7, #24]
 8003c36:	f001 fa01 	bl	800503c <pxPortInitialiseStack>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c4c:	bf00      	nop
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c5c:	f001 fb1a 	bl	8005294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <prvAddNewTaskToReadyList+0xc0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <prvAddNewTaskToReadyList+0xc0>)
 8003c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <prvAddNewTaskToReadyList+0xc4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c72:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <prvAddNewTaskToReadyList+0xc4>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c78:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <prvAddNewTaskToReadyList+0xc0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d110      	bne.n	8003ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c80:	f000 fbf4 	bl	800446c <prvInitialiseTaskLists>
 8003c84:	e00d      	b.n	8003ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <prvAddNewTaskToReadyList+0xc8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <prvAddNewTaskToReadyList+0xc4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d802      	bhi.n	8003ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <prvAddNewTaskToReadyList+0xc4>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <prvAddNewTaskToReadyList+0xcc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <prvAddNewTaskToReadyList+0xcc>)
 8003caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cac:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <prvAddNewTaskToReadyList+0xcc>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <prvAddNewTaskToReadyList+0xd0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <prvAddNewTaskToReadyList+0xd0>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <prvAddNewTaskToReadyList+0xd4>)
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f7ff f892 	bl	8002e06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ce2:	f001 fb07 	bl	80052f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <prvAddNewTaskToReadyList+0xc8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00e      	beq.n	8003d0c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvAddNewTaskToReadyList+0xc4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d207      	bcs.n	8003d0c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <prvAddNewTaskToReadyList+0xd8>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000284 	.word	0x20000284
 8003d18:	200001ac 	.word	0x200001ac
 8003d1c:	20000290 	.word	0x20000290
 8003d20:	200002a0 	.word	0x200002a0
 8003d24:	2000028c 	.word	0x2000028c
 8003d28:	200001b0 	.word	0x200001b0
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d017      	beq.n	8003d72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <vTaskDelay+0x60>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <vTaskDelay+0x30>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	60bb      	str	r3, [r7, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d60:	f000 f868 	bl	8003e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d64:	2100      	movs	r1, #0
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fdf0 	bl	800494c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d6c:	f000 f870 	bl	8003e50 <xTaskResumeAll>
 8003d70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <vTaskDelay+0x64>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200002ac 	.word	0x200002ac
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <vTaskStartScheduler+0x84>)
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	2300      	movs	r3, #0
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	2282      	movs	r2, #130	; 0x82
 8003daa:	491d      	ldr	r1, [pc, #116]	; (8003e20 <vTaskStartScheduler+0x88>)
 8003dac:	481d      	ldr	r0, [pc, #116]	; (8003e24 <vTaskStartScheduler+0x8c>)
 8003dae:	f7ff fe81 	bl	8003ab4 <xTaskCreate>
 8003db2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003dba:	f000 fe2d 	bl	8004a18 <xTimerCreateTimerTask>
 8003dbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d116      	bne.n	8003df4 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60bb      	str	r3, [r7, #8]
}
 8003dd8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <vTaskStartScheduler+0x90>)
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <vTaskStartScheduler+0x94>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <vTaskStartScheduler+0x98>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dee:	f001 f9af 	bl	8005150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003df2:	e00e      	b.n	8003e12 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d10a      	bne.n	8003e12 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	607b      	str	r3, [r7, #4]
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <vTaskStartScheduler+0x78>
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200002a8 	.word	0x200002a8
 8003e20:	0800628c 	.word	0x0800628c
 8003e24:	0800443d 	.word	0x0800443d
 8003e28:	200002a4 	.word	0x200002a4
 8003e2c:	20000290 	.word	0x20000290
 8003e30:	20000288 	.word	0x20000288

08003e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <vTaskSuspendAll+0x18>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a03      	ldr	r2, [pc, #12]	; (8003e4c <vTaskSuspendAll+0x18>)
 8003e40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	200002ac 	.word	0x200002ac

08003e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e5e:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <xTaskResumeAll+0x114>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	603b      	str	r3, [r7, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e7c:	f001 fa0a 	bl	8005294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <xTaskResumeAll+0x114>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <xTaskResumeAll+0x114>)
 8003e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <xTaskResumeAll+0x114>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d161      	bne.n	8003f56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e92:	4b35      	ldr	r3, [pc, #212]	; (8003f68 <xTaskResumeAll+0x118>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d05d      	beq.n	8003f56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9a:	e02e      	b.n	8003efa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <xTaskResumeAll+0x11c>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3318      	adds	r3, #24
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f809 	bl	8002ec0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff f804 	bl	8002ec0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <xTaskResumeAll+0x120>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <xTaskResumeAll+0x120>)
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <xTaskResumeAll+0x124>)
 8003ed8:	441a      	add	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fe ff90 	bl	8002e06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <xTaskResumeAll+0x128>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <xTaskResumeAll+0x12c>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efa:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <xTaskResumeAll+0x11c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1cc      	bne.n	8003e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f08:	f000 fb2e 	bl	8004568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <xTaskResumeAll+0x130>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f18:	f000 f846 	bl	8003fa8 <xTaskIncrementTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <xTaskResumeAll+0x12c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f1      	bne.n	8003f18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <xTaskResumeAll+0x130>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <xTaskResumeAll+0x12c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <xTaskResumeAll+0x134>)
 8003f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f56:	f001 f9cd 	bl	80052f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	200002ac 	.word	0x200002ac
 8003f68:	20000284 	.word	0x20000284
 8003f6c:	20000244 	.word	0x20000244
 8003f70:	2000028c 	.word	0x2000028c
 8003f74:	200001b0 	.word	0x200001b0
 8003f78:	200001ac 	.word	0x200001ac
 8003f7c:	20000298 	.word	0x20000298
 8003f80:	20000294 	.word	0x20000294
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <xTaskGetTickCount+0x1c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f94:	687b      	ldr	r3, [r7, #4]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000288 	.word	0x20000288

08003fa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb2:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <xTaskIncrementTick+0x144>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 8088 	bne.w	80040cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <xTaskIncrementTick+0x148>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc4:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <xTaskIncrementTick+0x148>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d120      	bne.n	8004012 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fd0:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	603b      	str	r3, [r7, #0]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <xTaskIncrementTick+0x46>
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <xTaskIncrementTick+0x150>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4a3e      	ldr	r2, [pc, #248]	; (80040f8 <xTaskIncrementTick+0x150>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <xTaskIncrementTick+0x154>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <xTaskIncrementTick+0x154>)
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	f000 faab 	bl	8004568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004012:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <xTaskIncrementTick+0x158>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d348      	bcc.n	80040ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401c:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <xTaskIncrementTick+0x14c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	4b36      	ldr	r3, [pc, #216]	; (8004100 <xTaskIncrementTick+0x158>)
 8004028:	f04f 32ff 	mov.w	r2, #4294967295
 800402c:	601a      	str	r2, [r3, #0]
					break;
 800402e:	e03e      	b.n	80040ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d203      	bcs.n	8004050 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004048:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <xTaskIncrementTick+0x158>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800404e:	e02e      	b.n	80040ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	3304      	adds	r3, #4
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe ff33 	bl	8002ec0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3318      	adds	r3, #24
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe ff2a 	bl	8002ec0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <xTaskIncrementTick+0x15c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	4a22      	ldr	r2, [pc, #136]	; (8004104 <xTaskIncrementTick+0x15c>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <xTaskIncrementTick+0x160>)
 800408c:	441a      	add	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe feb6 	bl	8002e06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4b1b      	ldr	r3, [pc, #108]	; (800410c <xTaskIncrementTick+0x164>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3b9      	bcc.n	800401c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ac:	e7b6      	b.n	800401c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <xTaskIncrementTick+0x164>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4914      	ldr	r1, [pc, #80]	; (8004108 <xTaskIncrementTick+0x160>)
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d907      	bls.n	80040d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e004      	b.n	80040d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <xTaskIncrementTick+0x168>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <xTaskIncrementTick+0x168>)
 80040d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskIncrementTick+0x16c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040e2:	697b      	ldr	r3, [r7, #20]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200002ac 	.word	0x200002ac
 80040f0:	20000288 	.word	0x20000288
 80040f4:	2000023c 	.word	0x2000023c
 80040f8:	20000240 	.word	0x20000240
 80040fc:	2000029c 	.word	0x2000029c
 8004100:	200002a4 	.word	0x200002a4
 8004104:	2000028c 	.word	0x2000028c
 8004108:	200001b0 	.word	0x200001b0
 800410c:	200001ac 	.word	0x200001ac
 8004110:	20000294 	.word	0x20000294
 8004114:	20000298 	.word	0x20000298

08004118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <vTaskSwitchContext+0xa4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <vTaskSwitchContext+0xa8>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800412c:	e03f      	b.n	80041ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <vTaskSwitchContext+0xa8>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <vTaskSwitchContext+0xac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	f1c3 031f 	rsb	r3, r3, #31
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	491f      	ldr	r1, [pc, #124]	; (80041c8 <vTaskSwitchContext+0xb0>)
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <vTaskSwitchContext+0x5c>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	607b      	str	r3, [r7, #4]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <vTaskSwitchContext+0x5a>
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <vTaskSwitchContext+0xb0>)
 8004180:	4413      	add	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3308      	adds	r3, #8
 8004196:	429a      	cmp	r2, r3
 8004198:	d104      	bne.n	80041a4 <vTaskSwitchContext+0x8c>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <vTaskSwitchContext+0xb4>)
 80041ac:	6013      	str	r3, [r2, #0]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	200002ac 	.word	0x200002ac
 80041c0:	20000298 	.word	0x20000298
 80041c4:	2000028c 	.word	0x2000028c
 80041c8:	200001b0 	.word	0x200001b0
 80041cc:	200001ac 	.word	0x200001ac

080041d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <vTaskPlaceOnEventList+0x44>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fe fe25 	bl	8002e4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004204:	2101      	movs	r1, #1
 8004206:	6838      	ldr	r0, [r7, #0]
 8004208:	f000 fba0 	bl	800494c <prvAddCurrentTaskToDelayedList>
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200001ac 	.word	0x200001ac

08004218 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	617b      	str	r3, [r7, #20]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <vTaskPlaceOnEventListRestricted+0x54>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3318      	adds	r3, #24
 8004246:	4619      	mov	r1, r3
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7fe fddc 	bl	8002e06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	68b8      	ldr	r0, [r7, #8]
 800425e:	f000 fb75 	bl	800494c <prvAddCurrentTaskToDelayedList>
	}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200001ac 	.word	0x200001ac

08004270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3318      	adds	r3, #24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fe0d 	bl	8002ec0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <xTaskRemoveFromEventList+0xac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11c      	bne.n	80042e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fe04 	bl	8002ec0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042d8:	441a      	add	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fe fd90 	bl	8002e06 <vListInsertEnd>
 80042e6:	e005      	b.n	80042f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3318      	adds	r3, #24
 80042ec:	4619      	mov	r1, r3
 80042ee:	480e      	ldr	r0, [pc, #56]	; (8004328 <xTaskRemoveFromEventList+0xb8>)
 80042f0:	f7fe fd89 	bl	8002e06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xTaskRemoveFromEventList+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d905      	bls.n	800430e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <xTaskRemoveFromEventList+0xc0>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e001      	b.n	8004312 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200002ac 	.word	0x200002ac
 8004320:	2000028c 	.word	0x2000028c
 8004324:	200001b0 	.word	0x200001b0
 8004328:	20000244 	.word	0x20000244
 800432c:	200001ac 	.word	0x200001ac
 8004330:	20000298 	.word	0x20000298

08004334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <vTaskInternalSetTimeOutState+0x24>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <vTaskInternalSetTimeOutState+0x28>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	2000029c 	.word	0x2000029c
 800435c:	20000288 	.word	0x20000288

08004360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	613b      	str	r3, [r7, #16]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043a2:	f000 ff77 	bl	8005294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <xTaskCheckForTimeOut+0xbc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d102      	bne.n	80043c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e023      	b.n	800440e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <xTaskCheckForTimeOut+0xc0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d007      	beq.n	80043e2 <xTaskCheckForTimeOut+0x82>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e015      	b.n	800440e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d20b      	bcs.n	8004404 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff9b 	bl	8004334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e004      	b.n	800440e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800440e:	f000 ff71 	bl	80052f4 <vPortExitCritical>

	return xReturn;
 8004412:	69fb      	ldr	r3, [r7, #28]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000288 	.word	0x20000288
 8004420:	2000029c 	.word	0x2000029c

08004424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <vTaskMissedYield+0x14>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000298 	.word	0x20000298

0800443c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004444:	f000 f852 	bl	80044ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <prvIdleTask+0x28>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d9f9      	bls.n	8004444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <prvIdleTask+0x2c>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004460:	e7f0      	b.n	8004444 <prvIdleTask+0x8>
 8004462:	bf00      	nop
 8004464:	200001b0 	.word	0x200001b0
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	e00c      	b.n	8004492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <prvInitialiseTaskLists+0x60>)
 8004484:	4413      	add	r3, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fc90 	bl	8002dac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3301      	adds	r3, #1
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d9ef      	bls.n	8004478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004498:	480d      	ldr	r0, [pc, #52]	; (80044d0 <prvInitialiseTaskLists+0x64>)
 800449a:	f7fe fc87 	bl	8002dac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800449e:	480d      	ldr	r0, [pc, #52]	; (80044d4 <prvInitialiseTaskLists+0x68>)
 80044a0:	f7fe fc84 	bl	8002dac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a4:	480c      	ldr	r0, [pc, #48]	; (80044d8 <prvInitialiseTaskLists+0x6c>)
 80044a6:	f7fe fc81 	bl	8002dac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044aa:	480c      	ldr	r0, [pc, #48]	; (80044dc <prvInitialiseTaskLists+0x70>)
 80044ac:	f7fe fc7e 	bl	8002dac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044b0:	480b      	ldr	r0, [pc, #44]	; (80044e0 <prvInitialiseTaskLists+0x74>)
 80044b2:	f7fe fc7b 	bl	8002dac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <prvInitialiseTaskLists+0x78>)
 80044b8:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <prvInitialiseTaskLists+0x64>)
 80044ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <prvInitialiseTaskLists+0x7c>)
 80044be:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <prvInitialiseTaskLists+0x68>)
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200001b0 	.word	0x200001b0
 80044d0:	20000214 	.word	0x20000214
 80044d4:	20000228 	.word	0x20000228
 80044d8:	20000244 	.word	0x20000244
 80044dc:	20000258 	.word	0x20000258
 80044e0:	20000270 	.word	0x20000270
 80044e4:	2000023c 	.word	0x2000023c
 80044e8:	20000240 	.word	0x20000240

080044ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f2:	e019      	b.n	8004528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044f4:	f000 fece 	bl	8005294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <prvCheckTasksWaitingTermination+0x50>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fcdb 	bl	8002ec0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <prvCheckTasksWaitingTermination+0x54>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <prvCheckTasksWaitingTermination+0x54>)
 8004512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <prvCheckTasksWaitingTermination+0x58>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3b01      	subs	r3, #1
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <prvCheckTasksWaitingTermination+0x58>)
 800451c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800451e:	f000 fee9 	bl	80052f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f810 	bl	8004548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <prvCheckTasksWaitingTermination+0x58>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e1      	bne.n	80044f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000258 	.word	0x20000258
 8004540:	20000284 	.word	0x20000284
 8004544:	2000026c 	.word	0x2000026c

08004548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f883 	bl	8005660 <vPortFree>
			vPortFree( pxTCB );
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f001 f880 	bl	8005660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800456e:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <prvResetNextTaskUnblockTime+0x38>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <prvResetNextTaskUnblockTime+0x3c>)
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004580:	e008      	b.n	8004594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <prvResetNextTaskUnblockTime+0x38>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	2000023c 	.word	0x2000023c
 80045a4:	200002a4 	.word	0x200002a4

080045a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <xTaskGetSchedulerState+0x34>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045b6:	2301      	movs	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	e008      	b.n	80045ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <xTaskGetSchedulerState+0x38>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045c4:	2302      	movs	r3, #2
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	e001      	b.n	80045ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ce:	687b      	ldr	r3, [r7, #4]
	}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	20000290 	.word	0x20000290
 80045e0:	200002ac 	.word	0x200002ac

080045e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d069      	beq.n	80046ce <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <xTaskPriorityInherit+0xf4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	429a      	cmp	r2, r3
 8004606:	d259      	bcs.n	80046bc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db06      	blt.n	800461e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004610:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <xTaskPriorityInherit+0xf4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	f1c3 0205 	rsb	r2, r3, #5
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6959      	ldr	r1, [r3, #20]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <xTaskPriorityInherit+0xf8>)
 8004630:	4413      	add	r3, r2
 8004632:	4299      	cmp	r1, r3
 8004634:	d13a      	bne.n	80046ac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3304      	adds	r3, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fc40 	bl	8002ec0 <uxListRemove>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d115      	bne.n	8004672 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4924      	ldr	r1, [pc, #144]	; (80046dc <xTaskPriorityInherit+0xf8>)
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xTaskPriorityInherit+0x8e>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	2201      	movs	r2, #1
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43da      	mvns	r2, r3
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <xTaskPriorityInherit+0xfc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4013      	ands	r3, r2
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <xTaskPriorityInherit+0xfc>)
 8004670:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004672:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <xTaskPriorityInherit+0xf4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	2201      	movs	r2, #1
 8004682:	409a      	lsls	r2, r3
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <xTaskPriorityInherit+0xfc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <xTaskPriorityInherit+0xfc>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <xTaskPriorityInherit+0xf8>)
 800469c:	441a      	add	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f7fe fbae 	bl	8002e06 <vListInsertEnd>
 80046aa:	e004      	b.n	80046b6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <xTaskPriorityInherit+0xf4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e008      	b.n	80046ce <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <xTaskPriorityInherit+0xf4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d201      	bcs.n	80046ce <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046ce:	68fb      	ldr	r3, [r7, #12]
	}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200001ac 	.word	0x200001ac
 80046dc:	200001b0 	.word	0x200001b0
 80046e0:	2000028c 	.word	0x2000028c

080046e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06e      	beq.n	80047d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046fa:	4b3a      	ldr	r3, [pc, #232]	; (80047e4 <xTaskPriorityDisinherit+0x100>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d00a      	beq.n	800471a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60bb      	str	r3, [r7, #8]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	1e5a      	subs	r2, r3, #1
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	429a      	cmp	r2, r3
 800474c:	d044      	beq.n	80047d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d140      	bne.n	80047d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fbb0 	bl	8002ec0 <uxListRemove>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d115      	bne.n	8004792 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	491f      	ldr	r1, [pc, #124]	; (80047e8 <xTaskPriorityDisinherit+0x104>)
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xTaskPriorityDisinherit+0xae>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <xTaskPriorityDisinherit+0x108>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4013      	ands	r3, r2
 800478e:	4a17      	ldr	r2, [pc, #92]	; (80047ec <xTaskPriorityDisinherit+0x108>)
 8004790:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	f1c3 0205 	rsb	r2, r3, #5
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	2201      	movs	r2, #1
 80047ac:	409a      	lsls	r2, r3
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <xTaskPriorityDisinherit+0x108>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <xTaskPriorityDisinherit+0x108>)
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <xTaskPriorityDisinherit+0x104>)
 80047c6:	441a      	add	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7fe fb19 	bl	8002e06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047d8:	697b      	ldr	r3, [r7, #20]
	}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200001ac 	.word	0x200001ac
 80047e8:	200001b0 	.word	0x200001b0
 80047ec:	2000028c 	.word	0x2000028c

080047f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8083 	beq.w	8004910 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60fb      	str	r3, [r7, #12]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d902      	bls.n	8004838 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e002      	b.n	800483e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	429a      	cmp	r2, r3
 8004846:	d063      	beq.n	8004910 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	429a      	cmp	r2, r3
 8004850:	d15e      	bne.n	8004910 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004852:	4b31      	ldr	r3, [pc, #196]	; (8004918 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	429a      	cmp	r2, r3
 800485a:	d10a      	bne.n	8004872 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60bb      	str	r3, [r7, #8]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	db04      	blt.n	8004890 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f1c3 0205 	rsb	r2, r3, #5
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6959      	ldr	r1, [r3, #20]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80048a0:	4413      	add	r3, r2
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d134      	bne.n	8004910 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe fb08 	bl	8002ec0 <uxListRemove>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d115      	bne.n	80048e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4918      	ldr	r1, [pc, #96]	; (800491c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2201      	movs	r2, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43da      	mvns	r2, r3
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4013      	ands	r3, r2
 80048de:	4a10      	ldr	r2, [pc, #64]	; (8004920 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80048e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	2201      	movs	r2, #1
 80048e8:	409a      	lsls	r2, r3
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4a06      	ldr	r2, [pc, #24]	; (800491c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004902:	441a      	add	r2, r3
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f7fe fa7b 	bl	8002e06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004910:	bf00      	nop
 8004912:	3720      	adds	r7, #32
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200001ac 	.word	0x200001ac
 800491c:	200001b0 	.word	0x200001b0
 8004920:	2000028c 	.word	0x2000028c

08004924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <pvTaskIncrementMutexHeldCount+0x24>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <pvTaskIncrementMutexHeldCount+0x24>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004936:	3201      	adds	r2, #1
 8004938:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800493a:	4b03      	ldr	r3, [pc, #12]	; (8004948 <pvTaskIncrementMutexHeldCount+0x24>)
 800493c:	681b      	ldr	r3, [r3, #0]
	}
 800493e:	4618      	mov	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	200001ac 	.word	0x200001ac

0800494c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800495c:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe faac 	bl	8002ec0 <uxListRemove>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	2201      	movs	r2, #1
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4013      	ands	r3, r2
 8004982:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004984:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d10a      	bne.n	80049a4 <prvAddCurrentTaskToDelayedList+0x58>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	481a      	ldr	r0, [pc, #104]	; (8004a08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800499e:	f7fe fa32 	bl	8002e06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049a2:	e026      	b.n	80049f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d209      	bcs.n	80049d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xc0>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7fe fa40 	bl	8002e4e <vListInsert>
}
 80049ce:	e010      	b.n	80049f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3304      	adds	r3, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f7fe fa36 	bl	8002e4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d202      	bcs.n	80049f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049ec:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6013      	str	r3, [r2, #0]
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000288 	.word	0x20000288
 8004a00:	200001ac 	.word	0x200001ac
 8004a04:	2000028c 	.word	0x2000028c
 8004a08:	20000270 	.word	0x20000270
 8004a0c:	20000240 	.word	0x20000240
 8004a10:	2000023c 	.word	0x2000023c
 8004a14:	200002a4 	.word	0x200002a4

08004a18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a22:	f000 fad5 	bl	8004fd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <xTimerCreateTimerTask+0x54>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <xTimerCreateTimerTask+0x58>)
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	2302      	movs	r3, #2
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2300      	movs	r3, #0
 8004a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a3c:	490d      	ldr	r1, [pc, #52]	; (8004a74 <xTimerCreateTimerTask+0x5c>)
 8004a3e:	480e      	ldr	r0, [pc, #56]	; (8004a78 <xTimerCreateTimerTask+0x60>)
 8004a40:	f7ff f838 	bl	8003ab4 <xTaskCreate>
 8004a44:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	603b      	str	r3, [r7, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004a62:	687b      	ldr	r3, [r7, #4]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200002e0 	.word	0x200002e0
 8004a70:	200002e4 	.word	0x200002e4
 8004a74:	08006294 	.word	0x08006294
 8004a78:	08004bb1 	.word	0x08004bb1

08004a7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	623b      	str	r3, [r7, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <xTimerGenericCommand+0x98>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d02a      	beq.n	8004b08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	dc18      	bgt.n	8004af6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ac4:	f7ff fd70 	bl	80045a8 <xTaskGetSchedulerState>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d109      	bne.n	8004ae2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <xTimerGenericCommand+0x98>)
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f107 0114 	add.w	r1, r7, #20
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ada:	f7fe fae3 	bl	80030a4 <xQueueGenericSend>
 8004ade:	6278      	str	r0, [r7, #36]	; 0x24
 8004ae0:	e012      	b.n	8004b08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <xTimerGenericCommand+0x98>)
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	f107 0114 	add.w	r1, r7, #20
 8004aea:	2300      	movs	r3, #0
 8004aec:	2200      	movs	r2, #0
 8004aee:	f7fe fad9 	bl	80030a4 <xQueueGenericSend>
 8004af2:	6278      	str	r0, [r7, #36]	; 0x24
 8004af4:	e008      	b.n	8004b08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <xTimerGenericCommand+0x98>)
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	f107 0114 	add.w	r1, r7, #20
 8004afe:	2300      	movs	r3, #0
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	f7fe fbcd 	bl	80032a0 <xQueueGenericSendFromISR>
 8004b06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3728      	adds	r7, #40	; 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200002e0 	.word	0x200002e0

08004b18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <prvProcessExpiredTimer+0x94>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe f9c5 	bl	8002ec0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	18d1      	adds	r1, r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	6978      	ldr	r0, [r7, #20]
 8004b52:	f000 f8d1 	bl	8004cf8 <prvInsertTimerInActiveList>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2300      	movs	r3, #0
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	2100      	movs	r1, #0
 8004b66:	6978      	ldr	r0, [r7, #20]
 8004b68:	f7ff ff88 	bl	8004a7c <xTimerGenericCommand>
 8004b6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d113      	bne.n	8004b9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	6978      	ldr	r0, [r7, #20]
 8004ba2:	4798      	blx	r3
}
 8004ba4:	bf00      	nop
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	200002d8 	.word	0x200002d8

08004bb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f857 	bl	8004c70 <prvGetNextExpireTime>
 8004bc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f803 	bl	8004bd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bce:	f000 f8d5 	bl	8004d7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bd2:	e7f1      	b.n	8004bb8 <prvTimerTask+0x8>

08004bd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bde:	f7ff f929 	bl	8003e34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f866 	bl	8004cb8 <prvSampleTimeNow>
 8004bec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d130      	bne.n	8004c56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <prvProcessTimerOrBlockTask+0x3c>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d806      	bhi.n	8004c10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c02:	f7ff f925 	bl	8003e50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff85 	bl	8004b18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c0e:	e024      	b.n	8004c5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <prvProcessTimerOrBlockTask+0x90>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <prvProcessTimerOrBlockTask+0x50>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <prvProcessTimerOrBlockTask+0x52>
 8004c24:	2300      	movs	r3, #0
 8004c26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <prvProcessTimerOrBlockTask+0x94>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7fe ff09 	bl	8003a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c3a:	f7ff f909 	bl	8003e50 <xTaskResumeAll>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <prvProcessTimerOrBlockTask+0x98>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
}
 8004c54:	e001      	b.n	8004c5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c56:	f7ff f8fb 	bl	8003e50 <xTaskResumeAll>
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200002dc 	.word	0x200002dc
 8004c68:	200002e0 	.word	0x200002e0
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <prvGetNextExpireTime+0x44>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <prvGetNextExpireTime+0x16>
 8004c82:	2201      	movs	r2, #1
 8004c84:	e000      	b.n	8004c88 <prvGetNextExpireTime+0x18>
 8004c86:	2200      	movs	r2, #0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <prvGetNextExpireTime+0x44>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e001      	b.n	8004ca4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200002d8 	.word	0x200002d8

08004cb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cc0:	f7ff f962 	bl	8003f88 <xTaskGetTickCount>
 8004cc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <prvSampleTimeNow+0x3c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d205      	bcs.n	8004cdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cd0:	f000 f91a 	bl	8004f08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ce2:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <prvSampleTimeNow+0x3c>)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200002e8 	.word	0x200002e8

08004cf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d812      	bhi.n	8004d44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e01b      	b.n	8004d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <prvInsertTimerInActiveList+0x7c>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7fe f886 	bl	8002e4e <vListInsert>
 8004d42:	e012      	b.n	8004d6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d206      	bcs.n	8004d5a <prvInsertTimerInActiveList+0x62>
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d54:	2301      	movs	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e007      	b.n	8004d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <prvInsertTimerInActiveList+0x80>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f7fe f872 	bl	8002e4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d6a:	697b      	ldr	r3, [r7, #20]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	200002dc 	.word	0x200002dc
 8004d78:	200002d8 	.word	0x200002d8

08004d7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d82:	e0ae      	b.n	8004ee2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f2c0 80aa 	blt.w	8004ee0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe f88f 	bl	8002ec0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ff87 	bl	8004cb8 <prvSampleTimeNow>
 8004daa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b09      	cmp	r3, #9
 8004db0:	f200 8097 	bhi.w	8004ee2 <prvProcessReceivedCommands+0x166>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <prvProcessReceivedCommands+0x40>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004de5 	.word	0x08004de5
 8004dc8:	08004e59 	.word	0x08004e59
 8004dcc:	08004e6d 	.word	0x08004e6d
 8004dd0:	08004eb7 	.word	0x08004eb7
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004de5 	.word	0x08004de5
 8004ddc:	08004e59 	.word	0x08004e59
 8004de0:	08004e6d 	.word	0x08004e6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	18d1      	adds	r1, r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e04:	f7ff ff78 	bl	8004cf8 <prvInsertTimerInActiveList>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d069      	beq.n	8004ee2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05e      	beq.n	8004ee2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e36:	f7ff fe21 	bl	8004a7c <xTimerGenericCommand>
 8004e3a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d14f      	bne.n	8004ee2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	61bb      	str	r3, [r7, #24]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e6a:	e03a      	b.n	8004ee2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	617b      	str	r3, [r7, #20]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	18d1      	adds	r1, r2, r3
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eb0:	f7ff ff22 	bl	8004cf8 <prvInsertTimerInActiveList>
					break;
 8004eb4:	e015      	b.n	8004ee2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec6:	f000 fbcb 	bl	8005660 <vPortFree>
 8004eca:	e00a      	b.n	8004ee2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ede:	e000      	b.n	8004ee2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ee0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <prvProcessReceivedCommands+0x188>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f107 0108 	add.w	r1, r7, #8
 8004eea:	2200      	movs	r2, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe fa6f 	bl	80033d0 <xQueueReceive>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f af45 	bne.w	8004d84 <prvProcessReceivedCommands+0x8>
	}
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	3728      	adds	r7, #40	; 0x28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200002e0 	.word	0x200002e0

08004f08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f0e:	e048      	b.n	8004fa2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f10:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <prvSwitchTimerLists+0xc0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <prvSwitchTimerLists+0xc0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fd ffc9 	bl	8002ec0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d02e      	beq.n	8004fa2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90e      	bls.n	8004f74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f62:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <prvSwitchTimerLists+0xc0>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fd ff6e 	bl	8002e4e <vListInsert>
 8004f72:	e016      	b.n	8004fa2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7ff fd7c 	bl	8004a7c <xTimerGenericCommand>
 8004f84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	603b      	str	r3, [r7, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <prvSwitchTimerLists+0xc0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1b1      	bne.n	8004f10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <prvSwitchTimerLists+0xc0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <prvSwitchTimerLists+0xc4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <prvSwitchTimerLists+0xc0>)
 8004fb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fba:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <prvSwitchTimerLists+0xc4>)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	6013      	str	r3, [r2, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200002d8 	.word	0x200002d8
 8004fcc:	200002dc 	.word	0x200002dc

08004fd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fd4:	f000 f95e 	bl	8005294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <prvCheckForValidListAndQueue+0x54>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11d      	bne.n	800501c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fe0:	4811      	ldr	r0, [pc, #68]	; (8005028 <prvCheckForValidListAndQueue+0x58>)
 8004fe2:	f7fd fee3 	bl	8002dac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fe6:	4811      	ldr	r0, [pc, #68]	; (800502c <prvCheckForValidListAndQueue+0x5c>)
 8004fe8:	f7fd fee0 	bl	8002dac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <prvCheckForValidListAndQueue+0x60>)
 8004fee:	4a0e      	ldr	r2, [pc, #56]	; (8005028 <prvCheckForValidListAndQueue+0x58>)
 8004ff0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <prvCheckForValidListAndQueue+0x64>)
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	; (800502c <prvCheckForValidListAndQueue+0x5c>)
 8004ff6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	210c      	movs	r1, #12
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	f7fd fff1 	bl	8002fe4 <xQueueGenericCreate>
 8005002:	4603      	mov	r3, r0
 8005004:	4a07      	ldr	r2, [pc, #28]	; (8005024 <prvCheckForValidListAndQueue+0x54>)
 8005006:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <prvCheckForValidListAndQueue+0x54>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <prvCheckForValidListAndQueue+0x54>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4908      	ldr	r1, [pc, #32]	; (8005038 <prvCheckForValidListAndQueue+0x68>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fcee 	bl	80039f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800501c:	f000 f96a 	bl	80052f4 <vPortExitCritical>
}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}
 8005024:	200002e0 	.word	0x200002e0
 8005028:	200002b0 	.word	0x200002b0
 800502c:	200002c4 	.word	0x200002c4
 8005030:	200002d8 	.word	0x200002d8
 8005034:	200002dc 	.word	0x200002dc
 8005038:	0800629c 	.word	0x0800629c

0800503c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b04      	subs	r3, #4
 800504c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3b04      	subs	r3, #4
 800505a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800506c:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <pxPortInitialiseStack+0x64>)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3b14      	subs	r3, #20
 8005076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b04      	subs	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f06f 0202 	mvn.w	r2, #2
 800508a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3b20      	subs	r3, #32
 8005090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	080050a5 	.word	0x080050a5

080050a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <prvTaskExitError+0x54>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d00a      	beq.n	80050ce <prvTaskExitError+0x2a>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <prvTaskExitError+0x28>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60bb      	str	r3, [r7, #8]
}
 80050e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050e2:	bf00      	nop
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0fc      	beq.n	80050e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	20000014 	.word	0x20000014
 80050fc:	00000000 	.word	0x00000000

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	4770      	bx	lr
 800511c:	f3af 8000 	nop.w

08005120 <pxCurrentTCBConst2>:
 8005120:	200001ac 	.word	0x200001ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005128:	4808      	ldr	r0, [pc, #32]	; (800514c <prvPortStartFirstTask+0x24>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f380 8814 	msr	CONTROL, r0
 800513a:	b662      	cpsie	i
 800513c:	b661      	cpsie	f
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	df00      	svc	0
 8005148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800514a:	bf00      	nop
 800514c:	e000ed08 	.word	0xe000ed08

08005150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005156:	4b46      	ldr	r3, [pc, #280]	; (8005270 <xPortStartScheduler+0x120>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a46      	ldr	r2, [pc, #280]	; (8005274 <xPortStartScheduler+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10a      	bne.n	8005176 <xPortStartScheduler+0x26>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	613b      	str	r3, [r7, #16]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005176:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <xPortStartScheduler+0x120>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3f      	ldr	r2, [pc, #252]	; (8005278 <xPortStartScheduler+0x128>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10a      	bne.n	8005196 <xPortStartScheduler+0x46>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60fb      	str	r3, [r7, #12]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <xPortStartScheduler+0x12c>)
 8005198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b31      	ldr	r3, [pc, #196]	; (8005280 <xPortStartScheduler+0x130>)
 80051bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051be:	4b31      	ldr	r3, [pc, #196]	; (8005284 <xPortStartScheduler+0x134>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051c4:	e009      	b.n	80051da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <xPortStartScheduler+0x134>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <xPortStartScheduler+0x134>)
 80051ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d0ef      	beq.n	80051c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <xPortStartScheduler+0x134>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1c3 0307 	rsb	r3, r3, #7
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d00a      	beq.n	8005208 <xPortStartScheduler+0xb8>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	60bb      	str	r3, [r7, #8]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <xPortStartScheduler+0x134>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <xPortStartScheduler+0x134>)
 8005210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <xPortStartScheduler+0x134>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <xPortStartScheduler+0x134>)
 800521c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <xPortStartScheduler+0x138>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a17      	ldr	r2, [pc, #92]	; (8005288 <xPortStartScheduler+0x138>)
 800522c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <xPortStartScheduler+0x138>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a14      	ldr	r2, [pc, #80]	; (8005288 <xPortStartScheduler+0x138>)
 8005238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800523c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800523e:	f000 f8dd 	bl	80053fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <xPortStartScheduler+0x13c>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005248:	f000 f8fc 	bl	8005444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800524c:	4b10      	ldr	r3, [pc, #64]	; (8005290 <xPortStartScheduler+0x140>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <xPortStartScheduler+0x140>)
 8005252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005258:	f7ff ff66 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800525c:	f7fe ff5c 	bl	8004118 <vTaskSwitchContext>
	prvTaskExitError();
 8005260:	f7ff ff20 	bl	80050a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00
 8005274:	410fc271 	.word	0x410fc271
 8005278:	410fc270 	.word	0x410fc270
 800527c:	e000e400 	.word	0xe000e400
 8005280:	200002ec 	.word	0x200002ec
 8005284:	200002f0 	.word	0x200002f0
 8005288:	e000ed20 	.word	0xe000ed20
 800528c:	20000014 	.word	0x20000014
 8005290:	e000ef34 	.word	0xe000ef34

08005294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	607b      	str	r3, [r7, #4]
}
 80052ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <vPortEnterCritical+0x58>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <vPortEnterCritical+0x58>)
 80052b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <vPortEnterCritical+0x58>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10f      	bne.n	80052e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <vPortEnterCritical+0x5c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	603b      	str	r3, [r7, #0]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <vPortEnterCritical+0x4a>
	}
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	20000014 	.word	0x20000014
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <vPortExitCritical+0x50>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <vPortExitCritical+0x24>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	607b      	str	r3, [r7, #4]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <vPortExitCritical+0x50>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3b01      	subs	r3, #1
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <vPortExitCritical+0x50>)
 8005320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <vPortExitCritical+0x50>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d105      	bne.n	8005336 <vPortExitCritical+0x42>
 800532a:	2300      	movs	r3, #0
 800532c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f383 8811 	msr	BASEPRI, r3
}
 8005334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000014 	.word	0x20000014
	...

08005350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f01e 0f10 	tst.w	lr, #16
 8005360:	bf08      	it	eq
 8005362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	6010      	str	r0, [r2, #0]
 800536c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005374:	f380 8811 	msr	BASEPRI, r0
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f7fe feca 	bl	8004118 <vTaskSwitchContext>
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f380 8811 	msr	BASEPRI, r0
 800538c:	bc09      	pop	{r0, r3}
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005396:	f01e 0f10 	tst.w	lr, #16
 800539a:	bf08      	it	eq
 800539c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053a0:	f380 8809 	msr	PSP, r0
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst>:
 80053b0:	200001ac 	.word	0x200001ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
}
 80053d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053d2:	f7fe fde9 	bl	8003fa8 <xTaskIncrementTick>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <SysTick_Handler+0x40>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f383 8811 	msr	BASEPRI, r3
}
 80053ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <vPortSetupTimerInterrupt+0x34>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <vPortSetupTimerInterrupt+0x38>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <vPortSetupTimerInterrupt+0x3c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <vPortSetupTimerInterrupt+0x40>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	4a09      	ldr	r2, [pc, #36]	; (8005440 <vPortSetupTimerInterrupt+0x44>)
 800541a:	3b01      	subs	r3, #1
 800541c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <vPortSetupTimerInterrupt+0x34>)
 8005420:	2207      	movs	r2, #7
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e010 	.word	0xe000e010
 8005434:	e000e018 	.word	0xe000e018
 8005438:	20000008 	.word	0x20000008
 800543c:	10624dd3 	.word	0x10624dd3
 8005440:	e000e014 	.word	0xe000e014

08005444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005454 <vPortEnableVFP+0x10>
 8005448:	6801      	ldr	r1, [r0, #0]
 800544a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800544e:	6001      	str	r1, [r0, #0]
 8005450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005452:	bf00      	nop
 8005454:	e000ed88 	.word	0xe000ed88

08005458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800545e:	f3ef 8305 	mrs	r3, IPSR
 8005462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d914      	bls.n	8005494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <vPortValidateInterruptPriority+0x70>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <vPortValidateInterruptPriority+0x74>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	7afa      	ldrb	r2, [r7, #11]
 800547a:	429a      	cmp	r2, r3
 800547c:	d20a      	bcs.n	8005494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <vPortValidateInterruptPriority+0x78>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <vPortValidateInterruptPriority+0x7c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d90a      	bls.n	80054ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	603b      	str	r3, [r7, #0]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <vPortValidateInterruptPriority+0x60>
	}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e3f0 	.word	0xe000e3f0
 80054cc:	200002ec 	.word	0x200002ec
 80054d0:	e000ed0c 	.word	0xe000ed0c
 80054d4:	200002f0 	.word	0x200002f0

080054d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054e4:	f7fe fca6 	bl	8003e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054e8:	4b58      	ldr	r3, [pc, #352]	; (800564c <pvPortMalloc+0x174>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f0:	f000 f910 	bl	8005714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054f4:	4b56      	ldr	r3, [pc, #344]	; (8005650 <pvPortMalloc+0x178>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 808e 	bne.w	800561e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01d      	beq.n	8005544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005508:	2208      	movs	r2, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d014      	beq.n	8005544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f023 0307 	bic.w	r3, r3, #7
 8005520:	3308      	adds	r3, #8
 8005522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <pvPortMalloc+0x6c>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	617b      	str	r3, [r7, #20]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d069      	beq.n	800561e <pvPortMalloc+0x146>
 800554a:	4b42      	ldr	r3, [pc, #264]	; (8005654 <pvPortMalloc+0x17c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	429a      	cmp	r2, r3
 8005552:	d864      	bhi.n	800561e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005554:	4b40      	ldr	r3, [pc, #256]	; (8005658 <pvPortMalloc+0x180>)
 8005556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005558:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <pvPortMalloc+0x180>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800555e:	e004      	b.n	800556a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d903      	bls.n	800557c <pvPortMalloc+0xa4>
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f1      	bne.n	8005560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800557c:	4b33      	ldr	r3, [pc, #204]	; (800564c <pvPortMalloc+0x174>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	429a      	cmp	r2, r3
 8005584:	d04b      	beq.n	800561e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2208      	movs	r2, #8
 800558c:	4413      	add	r3, r2
 800558e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	1ad2      	subs	r2, r2, r3
 80055a0:	2308      	movs	r3, #8
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d91f      	bls.n	80055e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4413      	add	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <pvPortMalloc+0xf8>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	613b      	str	r3, [r7, #16]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055e2:	69b8      	ldr	r0, [r7, #24]
 80055e4:	f000 f8f8 	bl	80057d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055e8:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <pvPortMalloc+0x17c>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <pvPortMalloc+0x17c>)
 80055f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <pvPortMalloc+0x17c>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b18      	ldr	r3, [pc, #96]	; (800565c <pvPortMalloc+0x184>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d203      	bcs.n	800560a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <pvPortMalloc+0x17c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <pvPortMalloc+0x184>)
 8005608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <pvPortMalloc+0x178>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	431a      	orrs	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800561e:	f7fe fc17 	bl	8003e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <pvPortMalloc+0x16a>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	60fb      	str	r3, [r7, #12]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <pvPortMalloc+0x168>
	return pvReturn;
 8005642:	69fb      	ldr	r3, [r7, #28]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20012efc 	.word	0x20012efc
 8005650:	20012f08 	.word	0x20012f08
 8005654:	20012f00 	.word	0x20012f00
 8005658:	20012ef4 	.word	0x20012ef4
 800565c:	20012f04 	.word	0x20012f04

08005660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d048      	beq.n	8005704 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005672:	2308      	movs	r3, #8
 8005674:	425b      	negs	r3, r3
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <vPortFree+0xac>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <vPortFree+0x44>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	60fb      	str	r3, [r7, #12]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <vPortFree+0x62>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60bb      	str	r3, [r7, #8]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <vPortFree+0xac>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d019      	beq.n	8005704 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d115      	bne.n	8005704 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <vPortFree+0xac>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056e8:	f7fe fba4 	bl	8003e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <vPortFree+0xb0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	4a06      	ldr	r2, [pc, #24]	; (8005710 <vPortFree+0xb0>)
 80056f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 f86c 	bl	80057d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005700:	f7fe fba6 	bl	8003e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005704:	bf00      	nop
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20012f08 	.word	0x20012f08
 8005710:	20012f00 	.word	0x20012f00

08005714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800571a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800571e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <prvHeapInit+0xac>)
 8005722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3307      	adds	r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0307 	bic.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <prvHeapInit+0xac>)
 8005744:	4413      	add	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <prvHeapInit+0xb0>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005752:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <prvHeapInit+0xb0>)
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005760:	2208      	movs	r2, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <prvHeapInit+0xb4>)
 8005774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <prvHeapInit+0xb4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <prvHeapInit+0xb4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvHeapInit+0xb4>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <prvHeapInit+0xb8>)
 80057a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <prvHeapInit+0xbc>)
 80057aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <prvHeapInit+0xc0>)
 80057ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057b2:	601a      	str	r2, [r3, #0]
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	200002f4 	.word	0x200002f4
 80057c4:	20012ef4 	.word	0x20012ef4
 80057c8:	20012efc 	.word	0x20012efc
 80057cc:	20012f04 	.word	0x20012f04
 80057d0:	20012f00 	.word	0x20012f00
 80057d4:	20012f08 	.word	0x20012f08

080057d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <prvInsertBlockIntoFreeList+0xac>)
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e002      	b.n	80057ec <prvInsertBlockIntoFreeList+0x14>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d8f7      	bhi.n	80057e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d108      	bne.n	800581a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d118      	bne.n	8005860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <prvInsertBlockIntoFreeList+0xb0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d00d      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e008      	b.n	8005868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvInsertBlockIntoFreeList+0xb0>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e003      	b.n	8005868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d002      	beq.n	8005876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20012ef4 	.word	0x20012ef4
 8005888:	20012efc 	.word	0x20012efc

0800588c <__errno>:
 800588c:	4b01      	ldr	r3, [pc, #4]	; (8005894 <__errno+0x8>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000018 	.word	0x20000018

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4d0d      	ldr	r5, [pc, #52]	; (80058d0 <__libc_init_array+0x38>)
 800589c:	4c0d      	ldr	r4, [pc, #52]	; (80058d4 <__libc_init_array+0x3c>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	2600      	movs	r6, #0
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	4d0b      	ldr	r5, [pc, #44]	; (80058d8 <__libc_init_array+0x40>)
 80058aa:	4c0c      	ldr	r4, [pc, #48]	; (80058dc <__libc_init_array+0x44>)
 80058ac:	f000 fc8e 	bl	80061cc <_init>
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	2600      	movs	r6, #0
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	080062f8 	.word	0x080062f8
 80058d4:	080062f8 	.word	0x080062f8
 80058d8:	080062f8 	.word	0x080062f8
 80058dc:	080062fc 	.word	0x080062fc

080058e0 <memcpy>:
 80058e0:	440a      	add	r2, r1
 80058e2:	4291      	cmp	r1, r2
 80058e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058e8:	d100      	bne.n	80058ec <memcpy+0xc>
 80058ea:	4770      	bx	lr
 80058ec:	b510      	push	{r4, lr}
 80058ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f6:	4291      	cmp	r1, r2
 80058f8:	d1f9      	bne.n	80058ee <memcpy+0xe>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <memset>:
 80058fc:	4402      	add	r2, r0
 80058fe:	4603      	mov	r3, r0
 8005900:	4293      	cmp	r3, r2
 8005902:	d100      	bne.n	8005906 <memset+0xa>
 8005904:	4770      	bx	lr
 8005906:	f803 1b01 	strb.w	r1, [r3], #1
 800590a:	e7f9      	b.n	8005900 <memset+0x4>

0800590c <siprintf>:
 800590c:	b40e      	push	{r1, r2, r3}
 800590e:	b500      	push	{lr}
 8005910:	b09c      	sub	sp, #112	; 0x70
 8005912:	ab1d      	add	r3, sp, #116	; 0x74
 8005914:	9002      	str	r0, [sp, #8]
 8005916:	9006      	str	r0, [sp, #24]
 8005918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800591c:	4809      	ldr	r0, [pc, #36]	; (8005944 <siprintf+0x38>)
 800591e:	9107      	str	r1, [sp, #28]
 8005920:	9104      	str	r1, [sp, #16]
 8005922:	4909      	ldr	r1, [pc, #36]	; (8005948 <siprintf+0x3c>)
 8005924:	f853 2b04 	ldr.w	r2, [r3], #4
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	a902      	add	r1, sp, #8
 8005930:	f000 f868 	bl	8005a04 <_svfiprintf_r>
 8005934:	9b02      	ldr	r3, [sp, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	b01c      	add	sp, #112	; 0x70
 800593c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005940:	b003      	add	sp, #12
 8005942:	4770      	bx	lr
 8005944:	20000018 	.word	0x20000018
 8005948:	ffff0208 	.word	0xffff0208

0800594c <__ssputs_r>:
 800594c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	688e      	ldr	r6, [r1, #8]
 8005952:	429e      	cmp	r6, r3
 8005954:	4682      	mov	sl, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4690      	mov	r8, r2
 800595a:	461f      	mov	r7, r3
 800595c:	d838      	bhi.n	80059d0 <__ssputs_r+0x84>
 800595e:	898a      	ldrh	r2, [r1, #12]
 8005960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005964:	d032      	beq.n	80059cc <__ssputs_r+0x80>
 8005966:	6825      	ldr	r5, [r4, #0]
 8005968:	6909      	ldr	r1, [r1, #16]
 800596a:	eba5 0901 	sub.w	r9, r5, r1
 800596e:	6965      	ldr	r5, [r4, #20]
 8005970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005978:	3301      	adds	r3, #1
 800597a:	444b      	add	r3, r9
 800597c:	106d      	asrs	r5, r5, #1
 800597e:	429d      	cmp	r5, r3
 8005980:	bf38      	it	cc
 8005982:	461d      	movcc	r5, r3
 8005984:	0553      	lsls	r3, r2, #21
 8005986:	d531      	bpl.n	80059ec <__ssputs_r+0xa0>
 8005988:	4629      	mov	r1, r5
 800598a:	f000 fb55 	bl	8006038 <_malloc_r>
 800598e:	4606      	mov	r6, r0
 8005990:	b950      	cbnz	r0, 80059a8 <__ssputs_r+0x5c>
 8005992:	230c      	movs	r3, #12
 8005994:	f8ca 3000 	str.w	r3, [sl]
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	6921      	ldr	r1, [r4, #16]
 80059aa:	464a      	mov	r2, r9
 80059ac:	f7ff ff98 	bl	80058e0 <memcpy>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ba:	81a3      	strh	r3, [r4, #12]
 80059bc:	6126      	str	r6, [r4, #16]
 80059be:	6165      	str	r5, [r4, #20]
 80059c0:	444e      	add	r6, r9
 80059c2:	eba5 0509 	sub.w	r5, r5, r9
 80059c6:	6026      	str	r6, [r4, #0]
 80059c8:	60a5      	str	r5, [r4, #8]
 80059ca:	463e      	mov	r6, r7
 80059cc:	42be      	cmp	r6, r7
 80059ce:	d900      	bls.n	80059d2 <__ssputs_r+0x86>
 80059d0:	463e      	mov	r6, r7
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	4632      	mov	r2, r6
 80059d6:	4641      	mov	r1, r8
 80059d8:	f000 faa8 	bl	8005f2c <memmove>
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	1b9b      	subs	r3, r3, r6
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4433      	add	r3, r6
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	2000      	movs	r0, #0
 80059ea:	e7db      	b.n	80059a4 <__ssputs_r+0x58>
 80059ec:	462a      	mov	r2, r5
 80059ee:	f000 fb97 	bl	8006120 <_realloc_r>
 80059f2:	4606      	mov	r6, r0
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d1e1      	bne.n	80059bc <__ssputs_r+0x70>
 80059f8:	6921      	ldr	r1, [r4, #16]
 80059fa:	4650      	mov	r0, sl
 80059fc:	f000 fab0 	bl	8005f60 <_free_r>
 8005a00:	e7c7      	b.n	8005992 <__ssputs_r+0x46>
	...

08005a04 <_svfiprintf_r>:
 8005a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	4698      	mov	r8, r3
 8005a0a:	898b      	ldrh	r3, [r1, #12]
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	b09d      	sub	sp, #116	; 0x74
 8005a10:	4607      	mov	r7, r0
 8005a12:	460d      	mov	r5, r1
 8005a14:	4614      	mov	r4, r2
 8005a16:	d50e      	bpl.n	8005a36 <_svfiprintf_r+0x32>
 8005a18:	690b      	ldr	r3, [r1, #16]
 8005a1a:	b963      	cbnz	r3, 8005a36 <_svfiprintf_r+0x32>
 8005a1c:	2140      	movs	r1, #64	; 0x40
 8005a1e:	f000 fb0b 	bl	8006038 <_malloc_r>
 8005a22:	6028      	str	r0, [r5, #0]
 8005a24:	6128      	str	r0, [r5, #16]
 8005a26:	b920      	cbnz	r0, 8005a32 <_svfiprintf_r+0x2e>
 8005a28:	230c      	movs	r3, #12
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	e0d1      	b.n	8005bd6 <_svfiprintf_r+0x1d2>
 8005a32:	2340      	movs	r3, #64	; 0x40
 8005a34:	616b      	str	r3, [r5, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a44:	2330      	movs	r3, #48	; 0x30
 8005a46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bf0 <_svfiprintf_r+0x1ec>
 8005a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a4e:	f04f 0901 	mov.w	r9, #1
 8005a52:	4623      	mov	r3, r4
 8005a54:	469a      	mov	sl, r3
 8005a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a5a:	b10a      	cbz	r2, 8005a60 <_svfiprintf_r+0x5c>
 8005a5c:	2a25      	cmp	r2, #37	; 0x25
 8005a5e:	d1f9      	bne.n	8005a54 <_svfiprintf_r+0x50>
 8005a60:	ebba 0b04 	subs.w	fp, sl, r4
 8005a64:	d00b      	beq.n	8005a7e <_svfiprintf_r+0x7a>
 8005a66:	465b      	mov	r3, fp
 8005a68:	4622      	mov	r2, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff ff6d 	bl	800594c <__ssputs_r>
 8005a72:	3001      	adds	r0, #1
 8005a74:	f000 80aa 	beq.w	8005bcc <_svfiprintf_r+0x1c8>
 8005a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a7a:	445a      	add	r2, fp
 8005a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80a2 	beq.w	8005bcc <_svfiprintf_r+0x1c8>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a92:	f10a 0a01 	add.w	sl, sl, #1
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005aa0:	4654      	mov	r4, sl
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	4851      	ldr	r0, [pc, #324]	; (8005bf0 <_svfiprintf_r+0x1ec>)
 8005aaa:	f7fa fb99 	bl	80001e0 <memchr>
 8005aae:	9a04      	ldr	r2, [sp, #16]
 8005ab0:	b9d8      	cbnz	r0, 8005aea <_svfiprintf_r+0xe6>
 8005ab2:	06d0      	lsls	r0, r2, #27
 8005ab4:	bf44      	itt	mi
 8005ab6:	2320      	movmi	r3, #32
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005abc:	0711      	lsls	r1, r2, #28
 8005abe:	bf44      	itt	mi
 8005ac0:	232b      	movmi	r3, #43	; 0x2b
 8005ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aca:	2b2a      	cmp	r3, #42	; 0x2a
 8005acc:	d015      	beq.n	8005afa <_svfiprintf_r+0xf6>
 8005ace:	9a07      	ldr	r2, [sp, #28]
 8005ad0:	4654      	mov	r4, sl
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f04f 0c0a 	mov.w	ip, #10
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ade:	3b30      	subs	r3, #48	; 0x30
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d94e      	bls.n	8005b82 <_svfiprintf_r+0x17e>
 8005ae4:	b1b0      	cbz	r0, 8005b14 <_svfiprintf_r+0x110>
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	e014      	b.n	8005b14 <_svfiprintf_r+0x110>
 8005aea:	eba0 0308 	sub.w	r3, r0, r8
 8005aee:	fa09 f303 	lsl.w	r3, r9, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	46a2      	mov	sl, r4
 8005af8:	e7d2      	b.n	8005aa0 <_svfiprintf_r+0x9c>
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	1d19      	adds	r1, r3, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bfbb      	ittet	lt
 8005b06:	425b      	neglt	r3, r3
 8005b08:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0c:	9307      	strge	r3, [sp, #28]
 8005b0e:	9307      	strlt	r3, [sp, #28]
 8005b10:	bfb8      	it	lt
 8005b12:	9204      	strlt	r2, [sp, #16]
 8005b14:	7823      	ldrb	r3, [r4, #0]
 8005b16:	2b2e      	cmp	r3, #46	; 0x2e
 8005b18:	d10c      	bne.n	8005b34 <_svfiprintf_r+0x130>
 8005b1a:	7863      	ldrb	r3, [r4, #1]
 8005b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1e:	d135      	bne.n	8005b8c <_svfiprintf_r+0x188>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bfb8      	it	lt
 8005b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b30:	3402      	adds	r4, #2
 8005b32:	9305      	str	r3, [sp, #20]
 8005b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c00 <_svfiprintf_r+0x1fc>
 8005b38:	7821      	ldrb	r1, [r4, #0]
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	f7fa fb4f 	bl	80001e0 <memchr>
 8005b42:	b140      	cbz	r0, 8005b56 <_svfiprintf_r+0x152>
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	eba0 000a 	sub.w	r0, r0, sl
 8005b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b4e:	9b04      	ldr	r3, [sp, #16]
 8005b50:	4303      	orrs	r3, r0
 8005b52:	3401      	adds	r4, #1
 8005b54:	9304      	str	r3, [sp, #16]
 8005b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5a:	4826      	ldr	r0, [pc, #152]	; (8005bf4 <_svfiprintf_r+0x1f0>)
 8005b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b60:	2206      	movs	r2, #6
 8005b62:	f7fa fb3d 	bl	80001e0 <memchr>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d038      	beq.n	8005bdc <_svfiprintf_r+0x1d8>
 8005b6a:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <_svfiprintf_r+0x1f4>)
 8005b6c:	bb1b      	cbnz	r3, 8005bb6 <_svfiprintf_r+0x1b2>
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	3307      	adds	r3, #7
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	3308      	adds	r3, #8
 8005b78:	9303      	str	r3, [sp, #12]
 8005b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7c:	4433      	add	r3, r6
 8005b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b80:	e767      	b.n	8005a52 <_svfiprintf_r+0x4e>
 8005b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b86:	460c      	mov	r4, r1
 8005b88:	2001      	movs	r0, #1
 8005b8a:	e7a5      	b.n	8005ad8 <_svfiprintf_r+0xd4>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	3401      	adds	r4, #1
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	4619      	mov	r1, r3
 8005b94:	f04f 0c0a 	mov.w	ip, #10
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b9e:	3a30      	subs	r2, #48	; 0x30
 8005ba0:	2a09      	cmp	r2, #9
 8005ba2:	d903      	bls.n	8005bac <_svfiprintf_r+0x1a8>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0c5      	beq.n	8005b34 <_svfiprintf_r+0x130>
 8005ba8:	9105      	str	r1, [sp, #20]
 8005baa:	e7c3      	b.n	8005b34 <_svfiprintf_r+0x130>
 8005bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7f0      	b.n	8005b98 <_svfiprintf_r+0x194>
 8005bb6:	ab03      	add	r3, sp, #12
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	462a      	mov	r2, r5
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <_svfiprintf_r+0x1f8>)
 8005bbe:	a904      	add	r1, sp, #16
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f3af 8000 	nop.w
 8005bc6:	1c42      	adds	r2, r0, #1
 8005bc8:	4606      	mov	r6, r0
 8005bca:	d1d6      	bne.n	8005b7a <_svfiprintf_r+0x176>
 8005bcc:	89ab      	ldrh	r3, [r5, #12]
 8005bce:	065b      	lsls	r3, r3, #25
 8005bd0:	f53f af2c 	bmi.w	8005a2c <_svfiprintf_r+0x28>
 8005bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bd6:	b01d      	add	sp, #116	; 0x74
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bdc:	ab03      	add	r3, sp, #12
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	462a      	mov	r2, r5
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <_svfiprintf_r+0x1f8>)
 8005be4:	a904      	add	r1, sp, #16
 8005be6:	4638      	mov	r0, r7
 8005be8:	f000 f87a 	bl	8005ce0 <_printf_i>
 8005bec:	e7eb      	b.n	8005bc6 <_svfiprintf_r+0x1c2>
 8005bee:	bf00      	nop
 8005bf0:	080062bc 	.word	0x080062bc
 8005bf4:	080062c6 	.word	0x080062c6
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	0800594d 	.word	0x0800594d
 8005c00:	080062c2 	.word	0x080062c2

08005c04 <_printf_common>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	4616      	mov	r6, r2
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	688a      	ldr	r2, [r1, #8]
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bfb8      	it	lt
 8005c18:	4613      	movlt	r3, r2
 8005c1a:	6033      	str	r3, [r6, #0]
 8005c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c20:	4607      	mov	r7, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	b10a      	cbz	r2, 8005c2a <_printf_common+0x26>
 8005c26:	3301      	adds	r3, #1
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	0699      	lsls	r1, r3, #26
 8005c2e:	bf42      	ittt	mi
 8005c30:	6833      	ldrmi	r3, [r6, #0]
 8005c32:	3302      	addmi	r3, #2
 8005c34:	6033      	strmi	r3, [r6, #0]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	f015 0506 	ands.w	r5, r5, #6
 8005c3c:	d106      	bne.n	8005c4c <_printf_common+0x48>
 8005c3e:	f104 0a19 	add.w	sl, r4, #25
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	6832      	ldr	r2, [r6, #0]
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	dc26      	bgt.n	8005c9a <_printf_common+0x96>
 8005c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c50:	1e13      	subs	r3, r2, #0
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	bf18      	it	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	0692      	lsls	r2, r2, #26
 8005c5a:	d42b      	bmi.n	8005cb4 <_printf_common+0xb0>
 8005c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d01e      	beq.n	8005ca8 <_printf_common+0xa4>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	68e5      	ldr	r5, [r4, #12]
 8005c6e:	6832      	ldr	r2, [r6, #0]
 8005c70:	f003 0306 	and.w	r3, r3, #6
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	bf08      	it	eq
 8005c78:	1aad      	subeq	r5, r5, r2
 8005c7a:	68a3      	ldr	r3, [r4, #8]
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	bf0c      	ite	eq
 8005c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c84:	2500      	movne	r5, #0
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bfc4      	itt	gt
 8005c8a:	1a9b      	subgt	r3, r3, r2
 8005c8c:	18ed      	addgt	r5, r5, r3
 8005c8e:	2600      	movs	r6, #0
 8005c90:	341a      	adds	r4, #26
 8005c92:	42b5      	cmp	r5, r6
 8005c94:	d11a      	bne.n	8005ccc <_printf_common+0xc8>
 8005c96:	2000      	movs	r0, #0
 8005c98:	e008      	b.n	8005cac <_printf_common+0xa8>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	47c0      	blx	r8
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d103      	bne.n	8005cb0 <_printf_common+0xac>
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb0:	3501      	adds	r5, #1
 8005cb2:	e7c6      	b.n	8005c42 <_printf_common+0x3e>
 8005cb4:	18e1      	adds	r1, r4, r3
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	2030      	movs	r0, #48	; 0x30
 8005cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cbe:	4422      	add	r2, r4
 8005cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc8:	3302      	adds	r3, #2
 8005cca:	e7c7      	b.n	8005c5c <_printf_common+0x58>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4622      	mov	r2, r4
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c0      	blx	r8
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d0e6      	beq.n	8005ca8 <_printf_common+0xa4>
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7d9      	b.n	8005c92 <_printf_common+0x8e>
	...

08005ce0 <_printf_i>:
 8005ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	7e0f      	ldrb	r7, [r1, #24]
 8005ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce8:	2f78      	cmp	r7, #120	; 0x78
 8005cea:	4691      	mov	r9, r2
 8005cec:	4680      	mov	r8, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	469a      	mov	sl, r3
 8005cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cf6:	d807      	bhi.n	8005d08 <_printf_i+0x28>
 8005cf8:	2f62      	cmp	r7, #98	; 0x62
 8005cfa:	d80a      	bhi.n	8005d12 <_printf_i+0x32>
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	f000 80d8 	beq.w	8005eb2 <_printf_i+0x1d2>
 8005d02:	2f58      	cmp	r7, #88	; 0x58
 8005d04:	f000 80a3 	beq.w	8005e4e <_printf_i+0x16e>
 8005d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d10:	e03a      	b.n	8005d88 <_printf_i+0xa8>
 8005d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d16:	2b15      	cmp	r3, #21
 8005d18:	d8f6      	bhi.n	8005d08 <_printf_i+0x28>
 8005d1a:	a101      	add	r1, pc, #4	; (adr r1, 8005d20 <_printf_i+0x40>)
 8005d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005d09 	.word	0x08005d09
 8005d2c:	08005d09 	.word	0x08005d09
 8005d30:	08005d09 	.word	0x08005d09
 8005d34:	08005d09 	.word	0x08005d09
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005d09 	.word	0x08005d09
 8005d40:	08005d09 	.word	0x08005d09
 8005d44:	08005d09 	.word	0x08005d09
 8005d48:	08005d09 	.word	0x08005d09
 8005d4c:	08005e99 	.word	0x08005e99
 8005d50:	08005dbd 	.word	0x08005dbd
 8005d54:	08005e7b 	.word	0x08005e7b
 8005d58:	08005d09 	.word	0x08005d09
 8005d5c:	08005d09 	.word	0x08005d09
 8005d60:	08005ebb 	.word	0x08005ebb
 8005d64:	08005d09 	.word	0x08005d09
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005d09 	.word	0x08005d09
 8005d70:	08005d09 	.word	0x08005d09
 8005d74:	08005e83 	.word	0x08005e83
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	602a      	str	r2, [r5, #0]
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0a3      	b.n	8005ed4 <_printf_i+0x1f4>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	6829      	ldr	r1, [r5, #0]
 8005d90:	0606      	lsls	r6, r0, #24
 8005d92:	f101 0304 	add.w	r3, r1, #4
 8005d96:	d50a      	bpl.n	8005dae <_printf_i+0xce>
 8005d98:	680e      	ldr	r6, [r1, #0]
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	2e00      	cmp	r6, #0
 8005d9e:	da03      	bge.n	8005da8 <_printf_i+0xc8>
 8005da0:	232d      	movs	r3, #45	; 0x2d
 8005da2:	4276      	negs	r6, r6
 8005da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da8:	485e      	ldr	r0, [pc, #376]	; (8005f24 <_printf_i+0x244>)
 8005daa:	230a      	movs	r3, #10
 8005dac:	e019      	b.n	8005de2 <_printf_i+0x102>
 8005dae:	680e      	ldr	r6, [r1, #0]
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005db6:	bf18      	it	ne
 8005db8:	b236      	sxthne	r6, r6
 8005dba:	e7ef      	b.n	8005d9c <_printf_i+0xbc>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	1d19      	adds	r1, r3, #4
 8005dc2:	6029      	str	r1, [r5, #0]
 8005dc4:	0601      	lsls	r1, r0, #24
 8005dc6:	d501      	bpl.n	8005dcc <_printf_i+0xec>
 8005dc8:	681e      	ldr	r6, [r3, #0]
 8005dca:	e002      	b.n	8005dd2 <_printf_i+0xf2>
 8005dcc:	0646      	lsls	r6, r0, #25
 8005dce:	d5fb      	bpl.n	8005dc8 <_printf_i+0xe8>
 8005dd0:	881e      	ldrh	r6, [r3, #0]
 8005dd2:	4854      	ldr	r0, [pc, #336]	; (8005f24 <_printf_i+0x244>)
 8005dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2308      	moveq	r3, #8
 8005dda:	230a      	movne	r3, #10
 8005ddc:	2100      	movs	r1, #0
 8005dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005de2:	6865      	ldr	r5, [r4, #4]
 8005de4:	60a5      	str	r5, [r4, #8]
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	bfa2      	ittt	ge
 8005dea:	6821      	ldrge	r1, [r4, #0]
 8005dec:	f021 0104 	bicge.w	r1, r1, #4
 8005df0:	6021      	strge	r1, [r4, #0]
 8005df2:	b90e      	cbnz	r6, 8005df8 <_printf_i+0x118>
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	d04d      	beq.n	8005e94 <_printf_i+0x1b4>
 8005df8:	4615      	mov	r5, r2
 8005dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8005e02:	5dc7      	ldrb	r7, [r0, r7]
 8005e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e08:	4637      	mov	r7, r6
 8005e0a:	42bb      	cmp	r3, r7
 8005e0c:	460e      	mov	r6, r1
 8005e0e:	d9f4      	bls.n	8005dfa <_printf_i+0x11a>
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d10b      	bne.n	8005e2c <_printf_i+0x14c>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07de      	lsls	r6, r3, #31
 8005e18:	d508      	bpl.n	8005e2c <_printf_i+0x14c>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	6861      	ldr	r1, [r4, #4]
 8005e1e:	4299      	cmp	r1, r3
 8005e20:	bfde      	ittt	le
 8005e22:	2330      	movle	r3, #48	; 0x30
 8005e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e2c:	1b52      	subs	r2, r2, r5
 8005e2e:	6122      	str	r2, [r4, #16]
 8005e30:	f8cd a000 	str.w	sl, [sp]
 8005e34:	464b      	mov	r3, r9
 8005e36:	aa03      	add	r2, sp, #12
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7ff fee2 	bl	8005c04 <_printf_common>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d14c      	bne.n	8005ede <_printf_i+0x1fe>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	b004      	add	sp, #16
 8005e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4e:	4835      	ldr	r0, [pc, #212]	; (8005f24 <_printf_i+0x244>)
 8005e50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e54:	6829      	ldr	r1, [r5, #0]
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e5c:	6029      	str	r1, [r5, #0]
 8005e5e:	061d      	lsls	r5, r3, #24
 8005e60:	d514      	bpl.n	8005e8c <_printf_i+0x1ac>
 8005e62:	07df      	lsls	r7, r3, #31
 8005e64:	bf44      	itt	mi
 8005e66:	f043 0320 	orrmi.w	r3, r3, #32
 8005e6a:	6023      	strmi	r3, [r4, #0]
 8005e6c:	b91e      	cbnz	r6, 8005e76 <_printf_i+0x196>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	f023 0320 	bic.w	r3, r3, #32
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	2310      	movs	r3, #16
 8005e78:	e7b0      	b.n	8005ddc <_printf_i+0xfc>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	2378      	movs	r3, #120	; 0x78
 8005e84:	4828      	ldr	r0, [pc, #160]	; (8005f28 <_printf_i+0x248>)
 8005e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e8a:	e7e3      	b.n	8005e54 <_printf_i+0x174>
 8005e8c:	0659      	lsls	r1, r3, #25
 8005e8e:	bf48      	it	mi
 8005e90:	b2b6      	uxthmi	r6, r6
 8005e92:	e7e6      	b.n	8005e62 <_printf_i+0x182>
 8005e94:	4615      	mov	r5, r2
 8005e96:	e7bb      	b.n	8005e10 <_printf_i+0x130>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	6826      	ldr	r6, [r4, #0]
 8005e9c:	6961      	ldr	r1, [r4, #20]
 8005e9e:	1d18      	adds	r0, r3, #4
 8005ea0:	6028      	str	r0, [r5, #0]
 8005ea2:	0635      	lsls	r5, r6, #24
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0x1cc>
 8005ea8:	6019      	str	r1, [r3, #0]
 8005eaa:	e002      	b.n	8005eb2 <_printf_i+0x1d2>
 8005eac:	0670      	lsls	r0, r6, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0x1c8>
 8005eb0:	8019      	strh	r1, [r3, #0]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	4615      	mov	r5, r2
 8005eb8:	e7ba      	b.n	8005e30 <_printf_i+0x150>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	681d      	ldr	r5, [r3, #0]
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7fa f98a 	bl	80001e0 <memchr>
 8005ecc:	b108      	cbz	r0, 8005ed2 <_printf_i+0x1f2>
 8005ece:	1b40      	subs	r0, r0, r5
 8005ed0:	6060      	str	r0, [r4, #4]
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005edc:	e7a8      	b.n	8005e30 <_printf_i+0x150>
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	47d0      	blx	sl
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d0ab      	beq.n	8005e44 <_printf_i+0x164>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	079b      	lsls	r3, r3, #30
 8005ef0:	d413      	bmi.n	8005f1a <_printf_i+0x23a>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	4298      	cmp	r0, r3
 8005ef8:	bfb8      	it	lt
 8005efa:	4618      	movlt	r0, r3
 8005efc:	e7a4      	b.n	8005e48 <_printf_i+0x168>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4632      	mov	r2, r6
 8005f02:	4649      	mov	r1, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	47d0      	blx	sl
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d09b      	beq.n	8005e44 <_printf_i+0x164>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	9903      	ldr	r1, [sp, #12]
 8005f12:	1a5b      	subs	r3, r3, r1
 8005f14:	42ab      	cmp	r3, r5
 8005f16:	dcf2      	bgt.n	8005efe <_printf_i+0x21e>
 8005f18:	e7eb      	b.n	8005ef2 <_printf_i+0x212>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	f104 0619 	add.w	r6, r4, #25
 8005f20:	e7f5      	b.n	8005f0e <_printf_i+0x22e>
 8005f22:	bf00      	nop
 8005f24:	080062cd 	.word	0x080062cd
 8005f28:	080062de 	.word	0x080062de

08005f2c <memmove>:
 8005f2c:	4288      	cmp	r0, r1
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	eb01 0402 	add.w	r4, r1, r2
 8005f34:	d902      	bls.n	8005f3c <memmove+0x10>
 8005f36:	4284      	cmp	r4, r0
 8005f38:	4623      	mov	r3, r4
 8005f3a:	d807      	bhi.n	8005f4c <memmove+0x20>
 8005f3c:	1e43      	subs	r3, r0, #1
 8005f3e:	42a1      	cmp	r1, r4
 8005f40:	d008      	beq.n	8005f54 <memmove+0x28>
 8005f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f4a:	e7f8      	b.n	8005f3e <memmove+0x12>
 8005f4c:	4402      	add	r2, r0
 8005f4e:	4601      	mov	r1, r0
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d100      	bne.n	8005f56 <memmove+0x2a>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f5e:	e7f7      	b.n	8005f50 <memmove+0x24>

08005f60 <_free_r>:
 8005f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d044      	beq.n	8005ff0 <_free_r+0x90>
 8005f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6a:	9001      	str	r0, [sp, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f72:	bfb8      	it	lt
 8005f74:	18e4      	addlt	r4, r4, r3
 8005f76:	f000 f913 	bl	80061a0 <__malloc_lock>
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ff4 <_free_r+0x94>)
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	b933      	cbnz	r3, 8005f90 <_free_r+0x30>
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	b003      	add	sp, #12
 8005f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f8c:	f000 b90e 	b.w	80061ac <__malloc_unlock>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d908      	bls.n	8005fa6 <_free_r+0x46>
 8005f94:	6825      	ldr	r5, [r4, #0]
 8005f96:	1961      	adds	r1, r4, r5
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	bf01      	itttt	eq
 8005f9c:	6819      	ldreq	r1, [r3, #0]
 8005f9e:	685b      	ldreq	r3, [r3, #4]
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	e7ed      	b.n	8005f82 <_free_r+0x22>
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b10b      	cbz	r3, 8005fb0 <_free_r+0x50>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d9fa      	bls.n	8005fa6 <_free_r+0x46>
 8005fb0:	6811      	ldr	r1, [r2, #0]
 8005fb2:	1855      	adds	r5, r2, r1
 8005fb4:	42a5      	cmp	r5, r4
 8005fb6:	d10b      	bne.n	8005fd0 <_free_r+0x70>
 8005fb8:	6824      	ldr	r4, [r4, #0]
 8005fba:	4421      	add	r1, r4
 8005fbc:	1854      	adds	r4, r2, r1
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	6011      	str	r1, [r2, #0]
 8005fc2:	d1e0      	bne.n	8005f86 <_free_r+0x26>
 8005fc4:	681c      	ldr	r4, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	6053      	str	r3, [r2, #4]
 8005fca:	4421      	add	r1, r4
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	e7da      	b.n	8005f86 <_free_r+0x26>
 8005fd0:	d902      	bls.n	8005fd8 <_free_r+0x78>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	6003      	str	r3, [r0, #0]
 8005fd6:	e7d6      	b.n	8005f86 <_free_r+0x26>
 8005fd8:	6825      	ldr	r5, [r4, #0]
 8005fda:	1961      	adds	r1, r4, r5
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf04      	itt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	bf04      	itt	eq
 8005fe8:	1949      	addeq	r1, r1, r5
 8005fea:	6021      	streq	r1, [r4, #0]
 8005fec:	6054      	str	r4, [r2, #4]
 8005fee:	e7ca      	b.n	8005f86 <_free_r+0x26>
 8005ff0:	b003      	add	sp, #12
 8005ff2:	bd30      	pop	{r4, r5, pc}
 8005ff4:	20012f0c 	.word	0x20012f0c

08005ff8 <sbrk_aligned>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4e0e      	ldr	r6, [pc, #56]	; (8006034 <sbrk_aligned+0x3c>)
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	6831      	ldr	r1, [r6, #0]
 8006000:	4605      	mov	r5, r0
 8006002:	b911      	cbnz	r1, 800600a <sbrk_aligned+0x12>
 8006004:	f000 f8bc 	bl	8006180 <_sbrk_r>
 8006008:	6030      	str	r0, [r6, #0]
 800600a:	4621      	mov	r1, r4
 800600c:	4628      	mov	r0, r5
 800600e:	f000 f8b7 	bl	8006180 <_sbrk_r>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d00a      	beq.n	800602c <sbrk_aligned+0x34>
 8006016:	1cc4      	adds	r4, r0, #3
 8006018:	f024 0403 	bic.w	r4, r4, #3
 800601c:	42a0      	cmp	r0, r4
 800601e:	d007      	beq.n	8006030 <sbrk_aligned+0x38>
 8006020:	1a21      	subs	r1, r4, r0
 8006022:	4628      	mov	r0, r5
 8006024:	f000 f8ac 	bl	8006180 <_sbrk_r>
 8006028:	3001      	adds	r0, #1
 800602a:	d101      	bne.n	8006030 <sbrk_aligned+0x38>
 800602c:	f04f 34ff 	mov.w	r4, #4294967295
 8006030:	4620      	mov	r0, r4
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	20012f10 	.word	0x20012f10

08006038 <_malloc_r>:
 8006038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	1ccd      	adds	r5, r1, #3
 800603e:	f025 0503 	bic.w	r5, r5, #3
 8006042:	3508      	adds	r5, #8
 8006044:	2d0c      	cmp	r5, #12
 8006046:	bf38      	it	cc
 8006048:	250c      	movcc	r5, #12
 800604a:	2d00      	cmp	r5, #0
 800604c:	4607      	mov	r7, r0
 800604e:	db01      	blt.n	8006054 <_malloc_r+0x1c>
 8006050:	42a9      	cmp	r1, r5
 8006052:	d905      	bls.n	8006060 <_malloc_r+0x28>
 8006054:	230c      	movs	r3, #12
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	2600      	movs	r6, #0
 800605a:	4630      	mov	r0, r6
 800605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006060:	4e2e      	ldr	r6, [pc, #184]	; (800611c <_malloc_r+0xe4>)
 8006062:	f000 f89d 	bl	80061a0 <__malloc_lock>
 8006066:	6833      	ldr	r3, [r6, #0]
 8006068:	461c      	mov	r4, r3
 800606a:	bb34      	cbnz	r4, 80060ba <_malloc_r+0x82>
 800606c:	4629      	mov	r1, r5
 800606e:	4638      	mov	r0, r7
 8006070:	f7ff ffc2 	bl	8005ff8 <sbrk_aligned>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	4604      	mov	r4, r0
 8006078:	d14d      	bne.n	8006116 <_malloc_r+0xde>
 800607a:	6834      	ldr	r4, [r6, #0]
 800607c:	4626      	mov	r6, r4
 800607e:	2e00      	cmp	r6, #0
 8006080:	d140      	bne.n	8006104 <_malloc_r+0xcc>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	4631      	mov	r1, r6
 8006086:	4638      	mov	r0, r7
 8006088:	eb04 0803 	add.w	r8, r4, r3
 800608c:	f000 f878 	bl	8006180 <_sbrk_r>
 8006090:	4580      	cmp	r8, r0
 8006092:	d13a      	bne.n	800610a <_malloc_r+0xd2>
 8006094:	6821      	ldr	r1, [r4, #0]
 8006096:	3503      	adds	r5, #3
 8006098:	1a6d      	subs	r5, r5, r1
 800609a:	f025 0503 	bic.w	r5, r5, #3
 800609e:	3508      	adds	r5, #8
 80060a0:	2d0c      	cmp	r5, #12
 80060a2:	bf38      	it	cc
 80060a4:	250c      	movcc	r5, #12
 80060a6:	4629      	mov	r1, r5
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7ff ffa5 	bl	8005ff8 <sbrk_aligned>
 80060ae:	3001      	adds	r0, #1
 80060b0:	d02b      	beq.n	800610a <_malloc_r+0xd2>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	442b      	add	r3, r5
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	e00e      	b.n	80060d8 <_malloc_r+0xa0>
 80060ba:	6822      	ldr	r2, [r4, #0]
 80060bc:	1b52      	subs	r2, r2, r5
 80060be:	d41e      	bmi.n	80060fe <_malloc_r+0xc6>
 80060c0:	2a0b      	cmp	r2, #11
 80060c2:	d916      	bls.n	80060f2 <_malloc_r+0xba>
 80060c4:	1961      	adds	r1, r4, r5
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	6025      	str	r5, [r4, #0]
 80060ca:	bf18      	it	ne
 80060cc:	6059      	strne	r1, [r3, #4]
 80060ce:	6863      	ldr	r3, [r4, #4]
 80060d0:	bf08      	it	eq
 80060d2:	6031      	streq	r1, [r6, #0]
 80060d4:	5162      	str	r2, [r4, r5]
 80060d6:	604b      	str	r3, [r1, #4]
 80060d8:	4638      	mov	r0, r7
 80060da:	f104 060b 	add.w	r6, r4, #11
 80060de:	f000 f865 	bl	80061ac <__malloc_unlock>
 80060e2:	f026 0607 	bic.w	r6, r6, #7
 80060e6:	1d23      	adds	r3, r4, #4
 80060e8:	1af2      	subs	r2, r6, r3
 80060ea:	d0b6      	beq.n	800605a <_malloc_r+0x22>
 80060ec:	1b9b      	subs	r3, r3, r6
 80060ee:	50a3      	str	r3, [r4, r2]
 80060f0:	e7b3      	b.n	800605a <_malloc_r+0x22>
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	bf0c      	ite	eq
 80060f8:	6032      	streq	r2, [r6, #0]
 80060fa:	605a      	strne	r2, [r3, #4]
 80060fc:	e7ec      	b.n	80060d8 <_malloc_r+0xa0>
 80060fe:	4623      	mov	r3, r4
 8006100:	6864      	ldr	r4, [r4, #4]
 8006102:	e7b2      	b.n	800606a <_malloc_r+0x32>
 8006104:	4634      	mov	r4, r6
 8006106:	6876      	ldr	r6, [r6, #4]
 8006108:	e7b9      	b.n	800607e <_malloc_r+0x46>
 800610a:	230c      	movs	r3, #12
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	4638      	mov	r0, r7
 8006110:	f000 f84c 	bl	80061ac <__malloc_unlock>
 8006114:	e7a1      	b.n	800605a <_malloc_r+0x22>
 8006116:	6025      	str	r5, [r4, #0]
 8006118:	e7de      	b.n	80060d8 <_malloc_r+0xa0>
 800611a:	bf00      	nop
 800611c:	20012f0c 	.word	0x20012f0c

08006120 <_realloc_r>:
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	4680      	mov	r8, r0
 8006126:	4614      	mov	r4, r2
 8006128:	460e      	mov	r6, r1
 800612a:	b921      	cbnz	r1, 8006136 <_realloc_r+0x16>
 800612c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	4611      	mov	r1, r2
 8006132:	f7ff bf81 	b.w	8006038 <_malloc_r>
 8006136:	b92a      	cbnz	r2, 8006144 <_realloc_r+0x24>
 8006138:	f7ff ff12 	bl	8005f60 <_free_r>
 800613c:	4625      	mov	r5, r4
 800613e:	4628      	mov	r0, r5
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	f000 f838 	bl	80061b8 <_malloc_usable_size_r>
 8006148:	4284      	cmp	r4, r0
 800614a:	4607      	mov	r7, r0
 800614c:	d802      	bhi.n	8006154 <_realloc_r+0x34>
 800614e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006152:	d812      	bhi.n	800617a <_realloc_r+0x5a>
 8006154:	4621      	mov	r1, r4
 8006156:	4640      	mov	r0, r8
 8006158:	f7ff ff6e 	bl	8006038 <_malloc_r>
 800615c:	4605      	mov	r5, r0
 800615e:	2800      	cmp	r0, #0
 8006160:	d0ed      	beq.n	800613e <_realloc_r+0x1e>
 8006162:	42bc      	cmp	r4, r7
 8006164:	4622      	mov	r2, r4
 8006166:	4631      	mov	r1, r6
 8006168:	bf28      	it	cs
 800616a:	463a      	movcs	r2, r7
 800616c:	f7ff fbb8 	bl	80058e0 <memcpy>
 8006170:	4631      	mov	r1, r6
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fef4 	bl	8005f60 <_free_r>
 8006178:	e7e1      	b.n	800613e <_realloc_r+0x1e>
 800617a:	4635      	mov	r5, r6
 800617c:	e7df      	b.n	800613e <_realloc_r+0x1e>
	...

08006180 <_sbrk_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d06      	ldr	r5, [pc, #24]	; (800619c <_sbrk_r+0x1c>)
 8006184:	2300      	movs	r3, #0
 8006186:	4604      	mov	r4, r0
 8006188:	4608      	mov	r0, r1
 800618a:	602b      	str	r3, [r5, #0]
 800618c:	f7fa ff88 	bl	80010a0 <_sbrk>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_sbrk_r+0x1a>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	b103      	cbz	r3, 800619a <_sbrk_r+0x1a>
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	20012f14 	.word	0x20012f14

080061a0 <__malloc_lock>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__malloc_lock+0x8>)
 80061a2:	f000 b811 	b.w	80061c8 <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	20012f18 	.word	0x20012f18

080061ac <__malloc_unlock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	; (80061b4 <__malloc_unlock+0x8>)
 80061ae:	f000 b80c 	b.w	80061ca <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	20012f18 	.word	0x20012f18

080061b8 <_malloc_usable_size_r>:
 80061b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061bc:	1f18      	subs	r0, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfbc      	itt	lt
 80061c2:	580b      	ldrlt	r3, [r1, r0]
 80061c4:	18c0      	addlt	r0, r0, r3
 80061c6:	4770      	bx	lr

080061c8 <__retarget_lock_acquire_recursive>:
 80061c8:	4770      	bx	lr

080061ca <__retarget_lock_release_recursive>:
 80061ca:	4770      	bx	lr

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
